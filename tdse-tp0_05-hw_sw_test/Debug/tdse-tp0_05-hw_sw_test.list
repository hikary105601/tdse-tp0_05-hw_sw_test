
tdse-tp0_05-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f7c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005430  08005430  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005438  08005438  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000005f4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000680  20000680  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123c8  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002799  00000000  00000000  00032484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00034c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a20  00000000  00000000  00035738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cdd  00000000  00000000  00036158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f4a0  00000000  00000000  0005be35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd234  00000000  00000000  0006b2d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148509  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039b0  00000000  00000000  0014855c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005114 	.word	0x08005114

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08005114 	.word	0x08005114

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 800059c:	f003 fbbe 	bl	8003d1c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fbf6 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80e 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f910 	bl	80007cc <MX_GPIO_Init>
  MX_ETH_Init();
 80005ac:	f000 f874 	bl	8000698 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f8b4 	bl	800071c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b4:	f000 f8dc 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* Application Init */


  app_init();
 80005b8:	f002 fe24 	bl	8003204 <app_init>

    /* USER CODE BEGIN 3 */
	  /* Application Update */


	  app_update();
 80005bc:	f002 fed8 	bl	8003370 <app_update>
 80005c0:	e7fc      	b.n	80005bc <main+0x24>
	...

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fe13 	bl	80041fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000640:	2307      	movs	r3, #7
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fc71 	bl	8001f30 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f968 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fed2 	bl	8002420 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f951 	bl	8000928 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800069c:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_ETH_Init+0x78>)
 800069e:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_ETH_Init+0x7c>)
 80006a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_ETH_Init+0x78>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_ETH_Init+0x78>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_ETH_Init+0x78>)
 80006b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_ETH_Init+0x78>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_ETH_Init+0x80>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_ETH_Init+0x80>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_ETH_Init+0x80>)
 80006cc:	22e1      	movs	r2, #225	; 0xe1
 80006ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_ETH_Init+0x80>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_ETH_Init+0x80>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_ETH_Init+0x80>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_ETH_Init+0x78>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <MX_ETH_Init+0x80>)
 80006e6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_ETH_Init+0x78>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_ETH_Init+0x78>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_ETH_Init+0x78>)
 80006f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006fa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_ETH_Init+0x78>)
 80006fe:	f000 fcc9 	bl	8001094 <HAL_ETH_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000708:	f000 f90e 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200005f8 	.word	0x200005f8
 8000714:	40028000 	.word	0x40028000
 8000718:	200000a8 	.word	0x200000a8

0800071c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART3_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000754:	f002 f860 	bl	8002818 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8e3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001ac 	.word	0x200001ac
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2204      	movs	r2, #4
 8000780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f001 fa9f 	bl	8001cf6 <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8b3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200001f0 	.word	0x200001f0

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4b      	ldr	r2, [pc, #300]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b49      	ldr	r3, [pc, #292]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b45      	ldr	r3, [pc, #276]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a44      	ldr	r2, [pc, #272]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a36      	ldr	r2, [pc, #216]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <MX_GPIO_Init+0x14c>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_GPIO_Init+0x150>)
 8000892:	f001 fa17 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x154>)
 800089c:	f001 fa12 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x158>)
 80008b8:	f001 f858 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x150>)
 80008d6:	f001 f849 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x154>)
 80008f2:	f001 f83b 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x154>)
 800090a:	f001 f82f 	bl	800196c <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800
 8000924:	40020800 	.word	0x40020800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a55      	ldr	r2, [pc, #340]	; (8000af8 <HAL_ETH_MspInit+0x174>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	f040 80a4 	bne.w	8000af0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
 80009ac:	4b53      	ldr	r3, [pc, #332]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a52      	ldr	r2, [pc, #328]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009c0:	623b      	str	r3, [r7, #32]
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a4b      	ldr	r2, [pc, #300]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a44      	ldr	r2, [pc, #272]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
 80009f0:	4b42      	ldr	r3, [pc, #264]	; (8000afc <HAL_ETH_MspInit+0x178>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	4b3e      	ldr	r3, [pc, #248]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b3b      	ldr	r3, [pc, #236]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	4b37      	ldr	r3, [pc, #220]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a36      	ldr	r2, [pc, #216]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	4b30      	ldr	r3, [pc, #192]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	4a2f      	ldr	r2, [pc, #188]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	6313      	str	r3, [r2, #48]	; 0x30
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <HAL_ETH_MspInit+0x178>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a6c:	2332      	movs	r3, #50	; 0x32
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	481e      	ldr	r0, [pc, #120]	; (8000b00 <HAL_ETH_MspInit+0x17c>)
 8000a88:	f000 ff70 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a8c:	2386      	movs	r3, #134	; 0x86
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9c:	230b      	movs	r3, #11
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4817      	ldr	r0, [pc, #92]	; (8000b04 <HAL_ETH_MspInit+0x180>)
 8000aa8:	f000 ff60 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <HAL_ETH_MspInit+0x184>)
 8000aca:	f000 ff4f 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ace:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <HAL_ETH_MspInit+0x188>)
 8000aec:	f000 ff3e 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	; 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40028000 	.word	0x40028000
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020400 	.word	0x40020400
 8000b0c:	40021800 	.word	0x40021800

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b88:	f000 fef0 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bc0:	d13f      	bne.n	8000c42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bde:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <HAL_PCD_MspInit+0xb0>)
 8000bfc:	f000 feb6 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <HAL_PCD_MspInit+0xb0>)
 8000c16:	f000 fea9 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	6353      	str	r3, [r2, #52]	; 0x34
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_PCD_MspInit+0xac>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca0:	f000 f8c8 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ca4:	f000 f9ef 	bl	8001086 <HAL_SYSTICK_IRQHandler>


  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f003 f898 	bl	8003e10 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20030000 	.word	0x20030000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200000b0 	.word	0x200000b0
 8000d14:	20000680 	.word	0x20000680

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f003 fa21 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fc13 	bl	8000598 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d74:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000d80:	08005440 	.word	0x08005440
  ldr r2, =_sbss
 8000d84:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000d88:	20000680 	.word	0x20000680

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f931 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fdb6 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f93b 	bl	800106e <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f911 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000640 	.word	0x20000640

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000640 	.word	0x20000640

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff47 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5c 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb0 	bl	8000fdc <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800108a:	f002 fa0b 	bl	80034a4 <HAL_SYSTICK_Callback>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010a4:	4baa      	ldr	r3, [pc, #680]	; (8001350 <HAL_ETH_Init+0x2bc>)
 80010a6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e183      	b.n	80013c2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d106      	bne.n	80010d4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fc58 	bl	8000984 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b9e      	ldr	r3, [pc, #632]	; (8001354 <HAL_ETH_Init+0x2c0>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	4a9d      	ldr	r2, [pc, #628]	; (8001354 <HAL_ETH_Init+0x2c0>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6453      	str	r3, [r2, #68]	; 0x44
 80010e4:	4b9b      	ldr	r3, [pc, #620]	; (8001354 <HAL_ETH_Init+0x2c0>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010f0:	4b99      	ldr	r3, [pc, #612]	; (8001358 <HAL_ETH_Init+0x2c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a98      	ldr	r2, [pc, #608]	; (8001358 <HAL_ETH_Init+0x2c4>)
 80010f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010fa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <HAL_ETH_Init+0x2c4>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	4994      	ldr	r1, [pc, #592]	; (8001358 <HAL_ETH_Init+0x2c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001120:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001122:	f7ff fe9b 	bl	8000e5c <HAL_GetTick>
 8001126:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001128:	e011      	b.n	800114e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800112a:	f7ff fe97 	bl	8000e5c <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001138:	d909      	bls.n	800114e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e139      	b.n	80013c2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1e4      	bne.n	800112a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f023 031c 	bic.w	r3, r3, #28
 800116e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001170:	f001 fb1e 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 8001174:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4a78      	ldr	r2, [pc, #480]	; (800135c <HAL_ETH_Init+0x2c8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d908      	bls.n	8001190 <HAL_ETH_Init+0xfc>
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4a77      	ldr	r2, [pc, #476]	; (8001360 <HAL_ETH_Init+0x2cc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d804      	bhi.n	8001190 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f043 0308 	orr.w	r3, r3, #8
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e027      	b.n	80011e0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	4a73      	ldr	r2, [pc, #460]	; (8001360 <HAL_ETH_Init+0x2cc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d908      	bls.n	80011aa <HAL_ETH_Init+0x116>
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4a6d      	ldr	r2, [pc, #436]	; (8001350 <HAL_ETH_Init+0x2bc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d204      	bcs.n	80011aa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f043 030c 	orr.w	r3, r3, #12
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	e01a      	b.n	80011e0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4a68      	ldr	r2, [pc, #416]	; (8001350 <HAL_ETH_Init+0x2bc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d303      	bcc.n	80011ba <HAL_ETH_Init+0x126>
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4a6b      	ldr	r2, [pc, #428]	; (8001364 <HAL_ETH_Init+0x2d0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d911      	bls.n	80011de <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4a69      	ldr	r2, [pc, #420]	; (8001364 <HAL_ETH_Init+0x2d0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d908      	bls.n	80011d4 <HAL_ETH_Init+0x140>
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4a68      	ldr	r2, [pc, #416]	; (8001368 <HAL_ETH_Init+0x2d4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d804      	bhi.n	80011d4 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e005      	b.n	80011e0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	e000      	b.n	80011e0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80011de:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80011e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ec:	2100      	movs	r1, #0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f954 	bl	800149c <HAL_ETH_WritePHYRegister>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80011fe:	6939      	ldr	r1, [r7, #16]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9b1 	bl	8001568 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0d7      	b.n	80013c2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001212:	20ff      	movs	r0, #255	; 0xff
 8001214:	f7ff fe2e 	bl	8000e74 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a5 	beq.w	800136c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001222:	f7ff fe1b 	bl	8000e5c <HAL_GetTick>
 8001226:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	461a      	mov	r2, r3
 800122e:	2101      	movs	r1, #1
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f8cb 	bl	80013cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001236:	f7ff fe11 	bl	8000e5c <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d90f      	bls.n	8001268 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f98a 	bl	8001568 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e0ac      	b.n	80013c2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0da      	beq.n	8001228 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f90f 	bl	800149c <HAL_ETH_WritePHYRegister>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00b      	beq.n	800129c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f96c 	bl	8001568 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001298:	2301      	movs	r3, #1
 800129a:	e092      	b.n	80013c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800129c:	f7ff fdde 	bl	8000e5c <HAL_GetTick>
 80012a0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	461a      	mov	r2, r3
 80012a8:	2101      	movs	r1, #1
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f88e 	bl	80013cc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012b0:	f7ff fdd4 	bl	8000e5c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d90f      	bls.n	80012e2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012c6:	6939      	ldr	r1, [r7, #16]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f94d 	bl	8001568 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e06f      	b.n	80013c2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0da      	beq.n	80012a2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	461a      	mov	r2, r3
 80012f2:	2110      	movs	r1, #16
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f869 	bl	80013cc <HAL_ETH_ReadPHYRegister>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001304:	6939      	ldr	r1, [r7, #16]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f92e 	bl	8001568 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001314:	2301      	movs	r3, #1
 8001316:	e054      	b.n	80013c2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	e002      	b.n	8001332 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	e035      	b.n	80013b0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e030      	b.n	80013b0 <HAL_ETH_Init+0x31c>
 800134e:	bf00      	nop
 8001350:	03938700 	.word	0x03938700
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	01312cff 	.word	0x01312cff
 8001360:	02160ebf 	.word	0x02160ebf
 8001364:	05f5e0ff 	.word	0x05f5e0ff
 8001368:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800137c:	4313      	orrs	r3, r2
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f889 	bl	800149c <HAL_ETH_WritePHYRegister>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00b      	beq.n	80013a8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f8e6 	bl	8001568 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e00c      	b.n	80013c2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013a8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013ac:	f7ff fd62 	bl	8000e74 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f8d8 	bl	8001568 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop

080013cc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	460b      	mov	r3, r1
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b82      	cmp	r3, #130	; 0x82
 80013ec:	d101      	bne.n	80013f2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80013ee:	2302      	movs	r3, #2
 80013f0:	e050      	b.n	8001494 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2282      	movs	r2, #130	; 0x82
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 031c 	and.w	r3, r3, #28
 8001408:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8a1b      	ldrh	r3, [r3, #16]
 800140e:	02db      	lsls	r3, r3, #11
 8001410:	b29b      	uxth	r3, r3
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001418:	897b      	ldrh	r3, [r7, #10]
 800141a:	019b      	lsls	r3, r3, #6
 800141c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f023 0302 	bic.w	r3, r3, #2
 800142c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800143e:	f7ff fd0d 	bl	8000e5c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001444:	e015      	b.n	8001472 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001446:	f7ff fd09 	bl	8000e5c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d309      	bcc.n	800146a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e014      	b.n	8001494 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e4      	bne.n	8001446 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b42      	cmp	r3, #66	; 0x42
 80014bc:	d101      	bne.n	80014c2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
 80014c0:	e04e      	b.n	8001560 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2242      	movs	r2, #66	; 0x42
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 031c 	and.w	r3, r3, #28
 80014d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8a1b      	ldrh	r3, [r3, #16]
 80014de:	02db      	lsls	r3, r3, #11
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80014e8:	897b      	ldrh	r3, [r7, #10]
 80014ea:	019b      	lsls	r3, r3, #6
 80014ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001518:	f7ff fca0 	bl	8000e5c <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800151e:	e015      	b.n	800154c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001520:	f7ff fc9c 	bl	8000e5c <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152e:	d309      	bcc.n	8001544 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e00d      	b.n	8001560 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e4      	bne.n	8001520 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b0b0      	sub	sp, #192	; 0xc0
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001584:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800158c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001596:	2300      	movs	r3, #0
 8001598:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80015ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b2:	663b      	str	r3, [r7, #96]	; 0x60
 80015b4:	e001      	b.n	80015ba <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80015ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015be:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015c4:	2300      	movs	r3, #0
 80015c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800163c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001640:	4bac      	ldr	r3, [pc, #688]	; (80018f4 <ETH_MACDMAConfig+0x38c>)
 8001642:	4013      	ands	r3, r2
 8001644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001648:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800164a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800164c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800164e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001650:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001654:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800165a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800165c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800165e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001662:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001668:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800166a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800166c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800166e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001670:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001674:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001678:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800167a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800167c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800167e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001682:	4313      	orrs	r3, r2
 8001684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001690:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff fbe9 	bl	8000e74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016aa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80016ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016b0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80016b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80016b4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80016b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80016ba:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80016bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80016c0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80016c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80016c6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80016c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80016cc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80016d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80016d8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016da:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff fbc4 	bl	8000e74 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016f4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016fe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001708:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001714:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001718:	f64f 7341 	movw	r3, #65345	; 0xff41
 800171c:	4013      	ands	r3, r2
 800171e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001722:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001726:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800172c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800172e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001732:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001738:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800173e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001740:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001744:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001746:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800174a:	4313      	orrs	r3, r2
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001758:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fb85 	bl	8000e74 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001772:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001774:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001778:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800178e:	2001      	movs	r0, #1
 8001790:	f7ff fb70 	bl	8000e74 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800179c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80017a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80017ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80017c2:	2304      	movs	r3, #4
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80017c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80017cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	3318      	adds	r3, #24
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <ETH_MACDMAConfig+0x390>)
 8001800:	4013      	ands	r3, r2
 8001802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001806:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001808:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800180a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800180c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800180e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001810:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001812:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001814:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001816:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001818:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800181a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800181c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800181e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001822:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001826:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001828:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800182c:	4313      	orrs	r3, r2
 800182e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183a:	3318      	adds	r3, #24
 800183c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001840:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184a:	3318      	adds	r3, #24
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001852:	2001      	movs	r0, #1
 8001854:	f7ff fb0e 	bl	8000e74 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001860:	3318      	adds	r3, #24
 8001862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001866:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800186a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800186c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800186e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001870:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001874:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001878:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800187a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800187c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800187e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001882:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800188c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001890:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff fae7 	bl	8000e74 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d10f      	bne.n	80018dc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	331c      	adds	r3, #28
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d8:	331c      	adds	r3, #28
 80018da:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	461a      	mov	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f809 	bl	80018fc <ETH_MACAddressConfig>
}
 80018ea:	bf00      	nop
 80018ec:	37c0      	adds	r7, #192	; 0xc0
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	ff20810f 	.word	0xff20810f
 80018f8:	f8de3f23 	.word	0xf8de3f23

080018fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3305      	adds	r3, #5
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	3204      	adds	r2, #4
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <ETH_MACAddressConfig+0x68>)
 800191e:	4413      	add	r3, r2
 8001920:	461a      	mov	r2, r3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3303      	adds	r3, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	061a      	lsls	r2, r3, #24
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3302      	adds	r3, #2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3301      	adds	r3, #1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	4313      	orrs	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <ETH_MACAddressConfig+0x6c>)
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40028040 	.word	0x40028040
 8001968:	40028044 	.word	0x40028044

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e177      	b.n	8001c78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8166 	bne.w	8001c72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80c0 	beq.w	8001c72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	4a65      	ldr	r2, [pc, #404]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	; 0x44
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0e:	4a61      	ldr	r2, [pc, #388]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d037      	beq.n	8001baa <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	; (8001c9c <HAL_GPIO_Init+0x330>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a56      	ldr	r2, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x334>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a55      	ldr	r2, [pc, #340]	; (8001ca4 <HAL_GPIO_Init+0x338>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x33c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a53      	ldr	r2, [pc, #332]	; (8001cac <HAL_GPIO_Init+0x340>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x22a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x344>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x348>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x350>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b82:	2309      	movs	r3, #9
 8001b84:	e012      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b86:	230a      	movs	r3, #10
 8001b88:	e010      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x328>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bee:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a1f      	ldr	r2, [pc, #124]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae84 	bls.w	8001988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40021400 	.word	0x40021400
 8001cb0:	40021800 	.word	0x40021800
 8001cb4:	40021c00 	.word	0x40021c00
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40022400 	.word	0x40022400
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf8:	b08f      	sub	sp, #60	; 0x3c
 8001cfa:	af0a      	add	r7, sp, #40	; 0x28
 8001cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e10f      	b.n	8001f28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7fe ff3c 	bl	8000ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 ffdd 	bl	8002d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	687e      	ldr	r6, [r7, #4]
 8001d54:	466d      	mov	r5, sp
 8001d56:	f106 0410 	add.w	r4, r6, #16
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d66:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d6a:	1d33      	adds	r3, r6, #4
 8001d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d6e:	6838      	ldr	r0, [r7, #0]
 8001d70:	f000 ff68 	bl	8002c44 <USB_CoreInit>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0d0      	b.n	8001f28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 ffcb 	bl	8002d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e04a      	b.n	8001e2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	333d      	adds	r3, #61	; 0x3d
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	333c      	adds	r3, #60	; 0x3c
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	b298      	uxth	r0, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3342      	adds	r3, #66	; 0x42
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	333f      	adds	r3, #63	; 0x3f
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3344      	adds	r3, #68	; 0x44
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3348      	adds	r3, #72	; 0x48
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3350      	adds	r3, #80	; 0x50
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3af      	bcc.n	8001d98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e044      	b.n	8001ec8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	1a9b      	subs	r3, r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	1a9b      	subs	r3, r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d3b5      	bcc.n	8001e3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	687e      	ldr	r6, [r7, #4]
 8001eda:	466d      	mov	r5, sp
 8001edc:	f106 0410 	add.w	r4, r6, #16
 8001ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef0:	1d33      	adds	r3, r6, #4
 8001ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f000 ff63 	bl	8002dc0 <USB_DevInit>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e00d      	b.n	8001f28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f001 f90e 	bl	8003142 <USB_DevDisconnect>

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e264      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f4e:	4ba3      	ldr	r3, [pc, #652]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d00c      	beq.n	8001f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4ba0      	ldr	r3, [pc, #640]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b9d      	ldr	r3, [pc, #628]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f74:	4b99      	ldr	r3, [pc, #612]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05b      	beq.n	8002038 <HAL_RCC_OscConfig+0x108>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d157      	bne.n	8002038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e23f      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d106      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x74>
 8001f96:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a90      	ldr	r2, [pc, #576]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x98>
 8001fae:	4b8b      	ldr	r3, [pc, #556]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b88      	ldr	r3, [pc, #544]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	4b84      	ldr	r3, [pc, #528]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a83      	ldr	r2, [pc, #524]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b81      	ldr	r3, [pc, #516]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a80      	ldr	r2, [pc, #512]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ff38 	bl	8000e5c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe ff34 	bl	8000e5c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e204      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xc0>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe ff24 	bl	8000e5c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002018:	f7fe ff20 	bl	8000e5c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1f0      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0xe8>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002052:	4b62      	ldr	r3, [pc, #392]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1c4      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b56      	ldr	r3, [pc, #344]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4952      	ldr	r1, [pc, #328]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_OscConfig+0x2b0>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a6:	f7fe fed9 	bl	8000e5c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ae:	f7fe fed5 	bl	8000e5c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e1a5      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4940      	ldr	r1, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b3f      	ldr	r3, [pc, #252]	; (80021e0 <HAL_RCC_OscConfig+0x2b0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe feb8 	bl	8000e5c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe feb4 	bl	8000e5c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e184      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d030      	beq.n	800217c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d016      	beq.n	8002150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_OscConfig+0x2b4>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe fe98 	bl	8000e5c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fe94 	bl	8000e5c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e164      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x200>
 800214e:	e015      	b.n	800217c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_OscConfig+0x2b4>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002156:	f7fe fe81 	bl	8000e5c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800215e:	f7fe fe7d 	bl	8000e5c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e14d      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a0 	beq.w	80022ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10f      	bne.n	80021ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b6:	2301      	movs	r3, #1
 80021b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_OscConfig+0x2b8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d121      	bne.n	800220a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_RCC_OscConfig+0x2b8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_RCC_OscConfig+0x2b8>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fe43 	bl	8000e5c <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	e011      	b.n	80021fe <HAL_RCC_OscConfig+0x2ce>
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
 80021e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fe36 	bl	8000e5c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e106      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fe:	4b85      	ldr	r3, [pc, #532]	; (8002414 <HAL_RCC_OscConfig+0x4e4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d106      	bne.n	8002220 <HAL_RCC_OscConfig+0x2f0>
 8002212:	4b81      	ldr	r3, [pc, #516]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a80      	ldr	r2, [pc, #512]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	e01c      	b.n	800225a <HAL_RCC_OscConfig+0x32a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x312>
 8002228:	4b7b      	ldr	r3, [pc, #492]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a7a      	ldr	r2, [pc, #488]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	4b78      	ldr	r3, [pc, #480]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002238:	4a77      	ldr	r2, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6713      	str	r3, [r2, #112]	; 0x70
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x32a>
 8002242:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a74      	ldr	r2, [pc, #464]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
 800224e:	4b72      	ldr	r3, [pc, #456]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	4a71      	ldr	r2, [pc, #452]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fdfb 	bl	8000e5c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fdf7 	bl	8000e5c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0c5      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b65      	ldr	r3, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_RCC_OscConfig+0x33a>
 800228c:	e014      	b.n	80022b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fde5 	bl	8000e5c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fde1 	bl	8000e5c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0af      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	4b5a      	ldr	r3, [pc, #360]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b56      	ldr	r3, [pc, #344]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a55      	ldr	r2, [pc, #340]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 809b 	beq.w	800240a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d05c      	beq.n	800239a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d141      	bne.n	800236c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_OscConfig+0x4ec>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fdb5 	bl	8000e5c <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fdb1 	bl	8000e5c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e081      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	4937      	ldr	r1, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	4313      	orrs	r3, r2
 800233c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_OscConfig+0x4ec>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fd8a 	bl	8000e5c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fd86 	bl	8000e5c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e056      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235e:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x41c>
 800236a:	e04e      	b.n	800240a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x4ec>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe fd73 	bl	8000e5c <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fd6f 	bl	8000e5c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e03f      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238c:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x44a>
 8002398:	e037      	b.n	800240a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e032      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <HAL_RCC_OscConfig+0x4e8>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d028      	beq.n	8002406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d11a      	bne.n	8002406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023d6:	4013      	ands	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023de:	4293      	cmp	r3, r2
 80023e0:	d111      	bne.n	8002406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	085b      	lsrs	r3, r3, #1
 80023ee:	3b01      	subs	r3, #1
 80023f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40007000 	.word	0x40007000
 8002418:	40023800 	.word	0x40023800
 800241c:	42470060 	.word	0x42470060

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cc      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d90c      	bls.n	800245c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b65      	ldr	r3, [pc, #404]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a58      	ldr	r2, [pc, #352]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	4a52      	ldr	r2, [pc, #328]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d044      	beq.n	8002540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d119      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d003      	beq.n	80024de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e06f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e067      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4934      	ldr	r1, [pc, #208]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fca4 	bl	8000e5c <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fca0 	bl	8000e5c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e04f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 020c 	and.w	r2, r3, #12
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	429a      	cmp	r2, r3
 800253e:	d1eb      	bne.n	8002518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d20c      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fc04 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00
 80025dc:	40023800 	.word	0x40023800
 80025e0:	0800533c 	.word	0x0800533c
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	2300      	movs	r3, #0
 80025fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002604:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d00d      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x40>
 8002610:	2b08      	cmp	r3, #8
 8002612:	f200 80bd 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 800261a:	2b04      	cmp	r3, #4
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x3a>
 800261e:	e0b7      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002622:	60bb      	str	r3, [r7, #8]
       break;
 8002624:	e0b7      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002626:	4b61      	ldr	r3, [pc, #388]	; (80027ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002628:	60bb      	str	r3, [r7, #8]
      break;
 800262a:	e0b4      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800262c:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002634:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002636:	4b5b      	ldr	r3, [pc, #364]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04d      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	461a      	mov	r2, r3
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	ea02 0800 	and.w	r8, r2, r0
 800265a:	ea03 0901 	and.w	r9, r3, r1
 800265e:	4640      	mov	r0, r8
 8002660:	4649      	mov	r1, r9
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	014b      	lsls	r3, r1, #5
 800266c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002670:	0142      	lsls	r2, r0, #5
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	ebb0 0008 	subs.w	r0, r0, r8
 800267a:	eb61 0109 	sbc.w	r1, r1, r9
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	018b      	lsls	r3, r1, #6
 8002688:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800268c:	0182      	lsls	r2, r0, #6
 800268e:	1a12      	subs	r2, r2, r0
 8002690:	eb63 0301 	sbc.w	r3, r3, r1
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	00d9      	lsls	r1, r3, #3
 800269e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026a2:	00d0      	lsls	r0, r2, #3
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	eb12 0208 	adds.w	r2, r2, r8
 80026ac:	eb43 0309 	adc.w	r3, r3, r9
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	0259      	lsls	r1, r3, #9
 80026ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80026be:	0250      	lsls	r0, r2, #9
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	f7fd fde6 	bl	80002a0 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	e04a      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	461a      	mov	r2, r3
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	ea02 0400 	and.w	r4, r2, r0
 80026f6:	ea03 0501 	and.w	r5, r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	014b      	lsls	r3, r1, #5
 8002708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800270c:	0142      	lsls	r2, r0, #5
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	1b00      	subs	r0, r0, r4
 8002714:	eb61 0105 	sbc.w	r1, r1, r5
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	018b      	lsls	r3, r1, #6
 8002722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002726:	0182      	lsls	r2, r0, #6
 8002728:	1a12      	subs	r2, r2, r0
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	00d9      	lsls	r1, r3, #3
 8002738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800273c:	00d0      	lsls	r0, r2, #3
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	1912      	adds	r2, r2, r4
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0299      	lsls	r1, r3, #10
 8002752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002756:	0290      	lsls	r0, r2, #10
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	461a      	mov	r2, r3
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f7fd fd9a 	bl	80002a0 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	60bb      	str	r3, [r7, #8]
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002792:	60bb      	str	r3, [r7, #8]
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	68bb      	ldr	r3, [r7, #8]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	0800534c 	.word	0x0800534c

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f4:	f7ff ffdc 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	0800534c 	.word	0x0800534c

08002818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e03f      	b.n	80028aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f966 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800285a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f829 	bl	80028b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b8:	b09f      	sub	sp, #124	; 0x7c
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ca:	68d9      	ldr	r1, [r3, #12]
 80028cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	ea40 0301 	orr.w	r3, r0, r1
 80028d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	431a      	orrs	r2, r3
 80028e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028f8:	f021 010c 	bic.w	r1, r1, #12
 80028fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002902:	430b      	orrs	r3, r1
 8002904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002912:	6999      	ldr	r1, [r3, #24]
 8002914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	ea40 0301 	orr.w	r3, r0, r1
 800291c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4bc5      	ldr	r3, [pc, #788]	; (8002c38 <UART_SetConfig+0x384>)
 8002924:	429a      	cmp	r2, r3
 8002926:	d004      	beq.n	8002932 <UART_SetConfig+0x7e>
 8002928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4bc3      	ldr	r3, [pc, #780]	; (8002c3c <UART_SetConfig+0x388>)
 800292e:	429a      	cmp	r2, r3
 8002930:	d103      	bne.n	800293a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002932:	f7ff ff5d 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8002936:	6778      	str	r0, [r7, #116]	; 0x74
 8002938:	e002      	b.n	8002940 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800293a:	f7ff ff45 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 800293e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002948:	f040 80b6 	bne.w	8002ab8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800294c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800294e:	461c      	mov	r4, r3
 8002950:	f04f 0500 	mov.w	r5, #0
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	1891      	adds	r1, r2, r2
 800295a:	6439      	str	r1, [r7, #64]	; 0x40
 800295c:	415b      	adcs	r3, r3
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002964:	1912      	adds	r2, r2, r4
 8002966:	eb45 0303 	adc.w	r3, r5, r3
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	00d9      	lsls	r1, r3, #3
 8002974:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002978:	00d0      	lsls	r0, r2, #3
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	1911      	adds	r1, r2, r4
 8002980:	6639      	str	r1, [r7, #96]	; 0x60
 8002982:	416b      	adcs	r3, r5
 8002984:	667b      	str	r3, [r7, #100]	; 0x64
 8002986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	1891      	adds	r1, r2, r2
 8002992:	63b9      	str	r1, [r7, #56]	; 0x38
 8002994:	415b      	adcs	r3, r3
 8002996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800299c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80029a0:	f7fd fc7e 	bl	80002a0 <__aeabi_uldivmod>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4ba5      	ldr	r3, [pc, #660]	; (8002c40 <UART_SetConfig+0x38c>)
 80029aa:	fba3 2302 	umull	r2, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	011e      	lsls	r6, r3, #4
 80029b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b4:	461c      	mov	r4, r3
 80029b6:	f04f 0500 	mov.w	r5, #0
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	1891      	adds	r1, r2, r2
 80029c0:	6339      	str	r1, [r7, #48]	; 0x30
 80029c2:	415b      	adcs	r3, r3
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
 80029c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029ca:	1912      	adds	r2, r2, r4
 80029cc:	eb45 0303 	adc.w	r3, r5, r3
 80029d0:	f04f 0000 	mov.w	r0, #0
 80029d4:	f04f 0100 	mov.w	r1, #0
 80029d8:	00d9      	lsls	r1, r3, #3
 80029da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029de:	00d0      	lsls	r0, r2, #3
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	1911      	adds	r1, r2, r4
 80029e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80029e8:	416b      	adcs	r3, r5
 80029ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80029fa:	415b      	adcs	r3, r3
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002a06:	f7fd fc4b 	bl	80002a0 <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4b8c      	ldr	r3, [pc, #560]	; (8002c40 <UART_SetConfig+0x38c>)
 8002a10:	fba3 1302 	umull	r1, r3, r3, r2
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	2164      	movs	r1, #100	; 0x64
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3332      	adds	r3, #50	; 0x32
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <UART_SetConfig+0x38c>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a30:	441e      	add	r6, r3
 8002a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a34:	4618      	mov	r0, r3
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	1894      	adds	r4, r2, r2
 8002a40:	623c      	str	r4, [r7, #32]
 8002a42:	415b      	adcs	r3, r3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
 8002a46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a4a:	1812      	adds	r2, r2, r0
 8002a4c:	eb41 0303 	adc.w	r3, r1, r3
 8002a50:	f04f 0400 	mov.w	r4, #0
 8002a54:	f04f 0500 	mov.w	r5, #0
 8002a58:	00dd      	lsls	r5, r3, #3
 8002a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a5e:	00d4      	lsls	r4, r2, #3
 8002a60:	4622      	mov	r2, r4
 8002a62:	462b      	mov	r3, r5
 8002a64:	1814      	adds	r4, r2, r0
 8002a66:	653c      	str	r4, [r7, #80]	; 0x50
 8002a68:	414b      	adcs	r3, r1
 8002a6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	461a      	mov	r2, r3
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	1891      	adds	r1, r2, r2
 8002a78:	61b9      	str	r1, [r7, #24]
 8002a7a:	415b      	adcs	r3, r3
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002a86:	f7fd fc0b 	bl	80002a0 <__aeabi_uldivmod>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <UART_SetConfig+0x38c>)
 8002a90:	fba3 1302 	umull	r1, r3, r3, r2
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	2164      	movs	r1, #100	; 0x64
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	3332      	adds	r3, #50	; 0x32
 8002aa2:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <UART_SetConfig+0x38c>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	f003 0207 	and.w	r2, r3, #7
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4432      	add	r2, r6
 8002ab4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ab6:	e0b9      	b.n	8002c2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aba:	461c      	mov	r4, r3
 8002abc:	f04f 0500 	mov.w	r5, #0
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	462b      	mov	r3, r5
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	6139      	str	r1, [r7, #16]
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ad0:	1912      	adds	r2, r2, r4
 8002ad2:	eb45 0303 	adc.w	r3, r5, r3
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	00d9      	lsls	r1, r3, #3
 8002ae0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ae4:	00d0      	lsls	r0, r2, #3
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	eb12 0804 	adds.w	r8, r2, r4
 8002aee:	eb43 0905 	adc.w	r9, r3, r5
 8002af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	008b      	lsls	r3, r1, #2
 8002b06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b0a:	0082      	lsls	r2, r0, #2
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fd fbc6 	bl	80002a0 <__aeabi_uldivmod>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <UART_SetConfig+0x38c>)
 8002b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	011e      	lsls	r6, r3, #4
 8002b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b24:	4618      	mov	r0, r3
 8002b26:	f04f 0100 	mov.w	r1, #0
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	1894      	adds	r4, r2, r2
 8002b30:	60bc      	str	r4, [r7, #8]
 8002b32:	415b      	adcs	r3, r3
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3a:	1812      	adds	r2, r2, r0
 8002b3c:	eb41 0303 	adc.w	r3, r1, r3
 8002b40:	f04f 0400 	mov.w	r4, #0
 8002b44:	f04f 0500 	mov.w	r5, #0
 8002b48:	00dd      	lsls	r5, r3, #3
 8002b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b4e:	00d4      	lsls	r4, r2, #3
 8002b50:	4622      	mov	r2, r4
 8002b52:	462b      	mov	r3, r5
 8002b54:	1814      	adds	r4, r2, r0
 8002b56:	64bc      	str	r4, [r7, #72]	; 0x48
 8002b58:	414b      	adcs	r3, r1
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	008b      	lsls	r3, r1, #2
 8002b70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b74:	0082      	lsls	r2, r0, #2
 8002b76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002b7a:	f7fd fb91 	bl	80002a0 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <UART_SetConfig+0x38c>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <UART_SetConfig+0x38c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba2:	441e      	add	r6, r3
 8002ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f04f 0100 	mov.w	r1, #0
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	1894      	adds	r4, r2, r2
 8002bb2:	603c      	str	r4, [r7, #0]
 8002bb4:	415b      	adcs	r3, r3
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bbc:	1812      	adds	r2, r2, r0
 8002bbe:	eb41 0303 	adc.w	r3, r1, r3
 8002bc2:	f04f 0400 	mov.w	r4, #0
 8002bc6:	f04f 0500 	mov.w	r5, #0
 8002bca:	00dd      	lsls	r5, r3, #3
 8002bcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bd0:	00d4      	lsls	r4, r2, #3
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	eb12 0a00 	adds.w	sl, r2, r0
 8002bda:	eb43 0b01 	adc.w	fp, r3, r1
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	008b      	lsls	r3, r1, #2
 8002bf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bf6:	0082      	lsls	r2, r0, #2
 8002bf8:	4650      	mov	r0, sl
 8002bfa:	4659      	mov	r1, fp
 8002bfc:	f7fd fb50 	bl	80002a0 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <UART_SetConfig+0x38c>)
 8002c06:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2164      	movs	r1, #100	; 0x64
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	3332      	adds	r3, #50	; 0x32
 8002c18:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <UART_SetConfig+0x38c>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4432      	add	r2, r6
 8002c2a:	609a      	str	r2, [r3, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	377c      	adds	r7, #124	; 0x7c
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	40011000 	.word	0x40011000
 8002c3c:	40011400 	.word	0x40011400
 8002c40:	51eb851f 	.word	0x51eb851f

08002c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c44:	b084      	sub	sp, #16
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	f107 001c 	add.w	r0, r7, #28
 8002c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d122      	bne.n	8002ca2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d105      	bne.n	8002c96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fa82 	bl	80031a0 <USB_CoreReset>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e01a      	b.n	8002cd8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa76 	bl	80031a0 <USB_CoreReset>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cca:	e005      	b.n	8002cd8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10b      	bne.n	8002cf6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f043 0206 	orr.w	r2, r3, #6
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d02:	b004      	add	sp, #16
 8002d04:	4770      	bx	lr

08002d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0201 	bic.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d115      	bne.n	8002d76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7fe f88c 	bl	8000e74 <HAL_Delay>
      ms++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa0e 	bl	8003184 <USB_GetMode>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d01e      	beq.n	8002dac <USB_SetCurrentMode+0x84>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b31      	cmp	r3, #49	; 0x31
 8002d72:	d9f0      	bls.n	8002d56 <USB_SetCurrentMode+0x2e>
 8002d74:	e01a      	b.n	8002dac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d115      	bne.n	8002da8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7fe f873 	bl	8000e74 <HAL_Delay>
      ms++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f9f5 	bl	8003184 <USB_GetMode>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <USB_SetCurrentMode+0x84>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2b31      	cmp	r3, #49	; 0x31
 8002da4:	d9f0      	bls.n	8002d88 <USB_SetCurrentMode+0x60>
 8002da6:	e001      	b.n	8002dac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e005      	b.n	8002db8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b32      	cmp	r3, #50	; 0x32
 8002db0:	d101      	bne.n	8002db6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	e009      	b.n	8002df4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3340      	adds	r3, #64	; 0x40
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	3301      	adds	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0e      	cmp	r3, #14
 8002df8:	d9f2      	bls.n	8002de0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11c      	bne.n	8002e3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
 8002e38:	e00b      	b.n	8002e52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	680b      	ldr	r3, [r1, #0]
 8002e70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e7e:	2100      	movs	r1, #0
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f945 	bl	8003110 <USB_SetDevSpeed>
 8002e86:	e008      	b.n	8002e9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f940 	bl	8003110 <USB_SetDevSpeed>
 8002e90:	e003      	b.n	8002e9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e92:	2103      	movs	r1, #3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f93b 	bl	8003110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f8f3 	bl	8003088 <USB_FlushTxFifo>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f90f 	bl	80030d0 <USB_FlushRxFifo>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	461a      	mov	r2, r3
 8002edc:	2300      	movs	r3, #0
 8002ede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e043      	b.n	8002f6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efc:	d118      	bne.n	8002f30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f10:	461a      	mov	r2, r3
 8002f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e013      	b.n	8002f42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e008      	b.n	8002f42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	461a      	mov	r2, r3
 8002f62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d3b7      	bcc.n	8002ee6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e043      	b.n	8003004 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f92:	d118      	bne.n	8002fc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e013      	b.n	8002fd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e008      	b.n	8002fd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3301      	adds	r3, #1
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d3b7      	bcc.n	8002f7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800301e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800302c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <USB_DevInit+0x2c4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800304c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800305e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800306c:	f043 0304 	orr.w	r3, r3, #4
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003080:	b004      	add	sp, #16
 8003082:	4770      	bx	lr
 8003084:	803c3800 	.word	0x803c3800

08003088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	4a08      	ldr	r2, [pc, #32]	; (80030cc <USB_FlushTxFifo+0x44>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e006      	b.n	80030c0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0320 	and.w	r3, r3, #32
 80030ba:	2b20      	cmp	r3, #32
 80030bc:	d0f1      	beq.n	80030a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	00030d40 	.word	0x00030d40

080030d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2210      	movs	r2, #16
 80030e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <USB_FlushRxFifo+0x3c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e006      	b.n	8003100 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d0f1      	beq.n	80030e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	00030d40 	.word	0x00030d40

08003110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800315c:	f023 0303 	bic.w	r3, r3, #3
 8003160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0301 	and.w	r3, r3, #1
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <USB_CoreReset+0x60>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e01a      	b.n	80031f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	daf3      	bge.n	80031ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	4a09      	ldr	r2, [pc, #36]	; (8003200 <USB_CoreReset+0x60>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e006      	b.n	80031f2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d0f1      	beq.n	80031d4 <USB_CoreReset+0x34>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	00030d40 	.word	0x00030d40

08003204 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8003204:	b590      	push	{r4, r7, lr}
 8003206:	b085      	sub	sp, #20
 8003208:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800320a:	b672      	cpsid	i
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <app_init+0x134>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a4a      	ldr	r2, [pc, #296]	; (800333c <app_init+0x138>)
 8003212:	213f      	movs	r1, #63	; 0x3f
 8003214:	4618      	mov	r0, r3
 8003216:	f001 f8cd 	bl	80043b4 <sniprintf>
 800321a:	4603      	mov	r3, r0
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <app_init+0x13c>)
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <app_init+0x134>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 f953 	bl	80034d0 <logger_log_print_>
 800322a:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 800322c:	b672      	cpsid	i
 800322e:	4b42      	ldr	r3, [pc, #264]	; (8003338 <app_init+0x134>)
 8003230:	681c      	ldr	r4, [r3, #0]
 8003232:	f7fd fe13 	bl	8000e5c <HAL_GetTick>
 8003236:	4603      	mov	r3, r0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	4b42      	ldr	r3, [pc, #264]	; (8003344 <app_init+0x140>)
 800323c:	4a42      	ldr	r2, [pc, #264]	; (8003348 <app_init+0x144>)
 800323e:	213f      	movs	r1, #63	; 0x3f
 8003240:	4620      	mov	r0, r4
 8003242:	f001 f8b7 	bl	80043b4 <sniprintf>
 8003246:	4603      	mov	r3, r0
 8003248:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <app_init+0x13c>)
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <app_init+0x134>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f93d 	bl	80034d0 <logger_log_print_>
 8003256:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8003258:	b672      	cpsid	i
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <app_init+0x134>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a3b      	ldr	r2, [pc, #236]	; (800334c <app_init+0x148>)
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	213f      	movs	r1, #63	; 0x3f
 8003264:	4618      	mov	r0, r3
 8003266:	f001 f8a5 	bl	80043b4 <sniprintf>
 800326a:	4603      	mov	r3, r0
 800326c:	4a34      	ldr	r2, [pc, #208]	; (8003340 <app_init+0x13c>)
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b31      	ldr	r3, [pc, #196]	; (8003338 <app_init+0x134>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f92b 	bl	80034d0 <logger_log_print_>
 800327a:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 800327c:	b672      	cpsid	i
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <app_init+0x134>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a33      	ldr	r2, [pc, #204]	; (8003350 <app_init+0x14c>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	213f      	movs	r1, #63	; 0x3f
 8003288:	4618      	mov	r0, r3
 800328a:	f001 f893 	bl	80043b4 <sniprintf>
 800328e:	4603      	mov	r3, r0
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <app_init+0x13c>)
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <app_init+0x134>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 f919 	bl	80034d0 <logger_log_print_>
 800329e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <app_init+0x150>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 80032a6:	b672      	cpsid	i
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <app_init+0x134>)
 80032aa:	6818      	ldr	r0, [r3, #0]
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <app_init+0x150>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <app_init+0x154>)
 80032b4:	4a29      	ldr	r2, [pc, #164]	; (800335c <app_init+0x158>)
 80032b6:	213f      	movs	r1, #63	; 0x3f
 80032b8:	f001 f87c 	bl	80043b4 <sniprintf>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a20      	ldr	r2, [pc, #128]	; (8003340 <app_init+0x13c>)
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <app_init+0x134>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f902 	bl	80034d0 <logger_log_print_>
 80032cc:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	e01a      	b.n	800330a <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 80032d4:	4922      	ldr	r1, [pc, #136]	; (8003360 <app_init+0x15c>)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	481e      	ldr	r0, [pc, #120]	; (8003360 <app_init+0x15c>)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4403      	add	r3, r0
 80032f2:	3308      	adds	r3, #8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <app_init+0x160>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2100      	movs	r1, #0
 8003300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d9e1      	bls.n	80032d4 <app_init+0xd0>
	}

	cycle_counter_init();
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <app_init+0x164>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <app_init+0x164>)
 8003316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331a:	60d3      	str	r3, [r2, #12]
 800331c:	4b13      	ldr	r3, [pc, #76]	; (800336c <app_init+0x168>)
 800331e:	2200      	movs	r2, #0
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <app_init+0x168>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a11      	ldr	r2, [pc, #68]	; (800336c <app_init+0x168>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6013      	str	r3, [r2, #0]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bd90      	pop	{r4, r7, pc}
 8003336:	bf00      	nop
 8003338:	08005378 	.word	0x08005378
 800333c:	08005180 	.word	0x08005180
 8003340:	2000065c 	.word	0x2000065c
 8003344:	08005184 	.word	0x08005184
 8003348:	08005190 	.word	0x08005190
 800334c:	2000000c 	.word	0x2000000c
 8003350:	20000010 	.word	0x20000010
 8003354:	20000658 	.word	0x20000658
 8003358:	080051b4 	.word	0x080051b4
 800335c:	080051c0 	.word	0x080051c0
 8003360:	08005354 	.word	0x08005354
 8003364:	20000644 	.word	0x20000644
 8003368:	e000edf0 	.word	0xe000edf0
 800336c:	e0001000 	.word	0xe0001000

08003370 <app_update>:

void app_update(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af02      	add	r7, sp, #8
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8003376:	4b3d      	ldr	r3, [pc, #244]	; (800346c <app_update+0xfc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d071      	beq.n	8003462 <app_update+0xf2>
    {
    	g_app_tick_cnt--;
 800337e:	4b3b      	ldr	r3, [pc, #236]	; (800346c <app_update+0xfc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	4a39      	ldr	r2, [pc, #228]	; (800346c <app_update+0xfc>)
 8003386:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <app_update+0x100>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	4a38      	ldr	r2, [pc, #224]	; (8003470 <app_update+0x100>)
 8003390:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8003392:	4b38      	ldr	r3, [pc, #224]	; (8003474 <app_update+0x104>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

		/* Print out: Application execution counter */
		LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8003398:	b672      	cpsid	i
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <app_update+0x108>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <app_update+0x100>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4b35      	ldr	r3, [pc, #212]	; (800347c <app_update+0x10c>)
 80033a6:	4a36      	ldr	r2, [pc, #216]	; (8003480 <app_update+0x110>)
 80033a8:	213f      	movs	r1, #63	; 0x3f
 80033aa:	f001 f803 	bl	80043b4 <sniprintf>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a34      	ldr	r2, [pc, #208]	; (8003484 <app_update+0x114>)
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b30      	ldr	r3, [pc, #192]	; (8003478 <app_update+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f889 	bl	80034d0 <logger_log_print_>
 80033be:	b662      	cpsie	i

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 80033c0:	2300      	movs	r3, #0
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	e04a      	b.n	800345c <app_update+0xec>
		{
			cycle_counter_reset();
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <app_update+0x118>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80033cc:	492f      	ldr	r1, [pc, #188]	; (800348c <app_update+0x11c>)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3304      	adds	r3, #4
 80033dc:	6819      	ldr	r1, [r3, #0]
 80033de:	482b      	ldr	r0, [pc, #172]	; (800348c <app_update+0x11c>)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4403      	add	r3, r0
 80033ec:	3308      	adds	r3, #8
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 80033f4:	4b24      	ldr	r3, [pc, #144]	; (8003488 <app_update+0x118>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <app_update+0x120>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4925      	ldr	r1, [pc, #148]	; (8003494 <app_update+0x124>)
 80033fe:	fba1 1303 	umull	r1, r3, r1, r3
 8003402:	0c9b      	lsrs	r3, r3, #18
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	603b      	str	r3, [r7, #0]

			/* Update variables */
			g_app_time_us += cycle_counter_time_us;
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <app_update+0x104>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	4413      	add	r3, r2
 8003412:	4a18      	ldr	r2, [pc, #96]	; (8003474 <app_update+0x104>)
 8003414:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8003416:	4a20      	ldr	r2, [pc, #128]	; (8003498 <app_update+0x128>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d904      	bls.n	800342e <app_update+0xbe>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8003424:	491c      	ldr	r1, [pc, #112]	; (8003498 <app_update+0x128>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
				
			/* Print out: Cycle Counter */
			LOGGER_LOG(" %s: %lu uS\r\n", GET_NAME(g_app_time_us), g_app_time_us);
 800342e:	b672      	cpsid	i
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <app_update+0x108>)
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <app_update+0x104>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <app_update+0x12c>)
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <app_update+0x130>)
 800343e:	213f      	movs	r1, #63	; 0x3f
 8003440:	f000 ffb8 	bl	80043b4 <sniprintf>
 8003444:	4603      	mov	r3, r0
 8003446:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <app_update+0x114>)
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <app_update+0x108>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f83e 	bl	80034d0 <logger_log_print_>
 8003454:	b662      	cpsie	i
		for (index = 0; TASK_QTY > index; index++)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3301      	adds	r3, #1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d9b1      	bls.n	80033c6 <app_update+0x56>
		}
    }
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000654 	.word	0x20000654
 8003470:	20000658 	.word	0x20000658
 8003474:	20000650 	.word	0x20000650
 8003478:	08005378 	.word	0x08005378
 800347c:	080051b4 	.word	0x080051b4
 8003480:	080051c0 	.word	0x080051c0
 8003484:	2000065c 	.word	0x2000065c
 8003488:	e0001000 	.word	0xe0001000
 800348c:	08005354 	.word	0x08005354
 8003490:	20000000 	.word	0x20000000
 8003494:	431bde83 	.word	0x431bde83
 8003498:	20000644 	.word	0x20000644
 800349c:	080051cc 	.word	0x080051cc
 80034a0:	080051dc 	.word	0x080051dc

080034a4 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_SYSTICK_Callback+0x24>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <HAL_SYSTICK_Callback+0x24>)
 80034b0:	6013      	str	r3, [r2, #0]

	g_task_c_tick_cnt++;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_SYSTICK_Callback+0x28>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_SYSTICK_Callback+0x28>)
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000654 	.word	0x20000654
 80034cc:	2000066c 	.word	0x2000066c

080034d0 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	printf(msg);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 ff43 	bl	8004364 <iprintf>
	fflush(stdout);
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <logger_log_print_+0x24>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fd5b 	bl	8003fa0 <fflush>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000028 	.word	0x20000028

080034f8 <task_a_init>:
/********************** external data declaration *****************************/
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
void task_a_init(void *parameters)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_init), p_task_a);
 8003500:	b672      	cpsid	i
 8003502:	4b17      	ldr	r3, [pc, #92]	; (8003560 <task_a_init+0x68>)
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <task_a_init+0x6c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <task_a_init+0x70>)
 800350e:	4a17      	ldr	r2, [pc, #92]	; (800356c <task_a_init+0x74>)
 8003510:	213f      	movs	r1, #63	; 0x3f
 8003512:	f000 ff4f 	bl	80043b4 <sniprintf>
 8003516:	4603      	mov	r3, r0
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <task_a_init+0x78>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <task_a_init+0x68>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ffd5 	bl	80034d0 <logger_log_print_>
 8003526:	b662      	cpsie	i

	g_task_a_cnt = G_TASK_A_CNT_INI;
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <task_a_init+0x7c>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_a_cnt), g_task_a_cnt);
 800352e:	b672      	cpsid	i
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <task_a_init+0x68>)
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <task_a_init+0x7c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <task_a_init+0x80>)
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <task_a_init+0x84>)
 800353e:	213f      	movs	r1, #63	; 0x3f
 8003540:	f000 ff38 	bl	80043b4 <sniprintf>
 8003544:	4603      	mov	r3, r0
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <task_a_init+0x78>)
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <task_a_init+0x68>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ffbe 	bl	80034d0 <logger_log_print_>
 8003554:	b662      	cpsie	i
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	08005378 	.word	0x08005378
 8003564:	20000014 	.word	0x20000014
 8003568:	08005204 	.word	0x08005204
 800356c:	08005210 	.word	0x08005210
 8003570:	2000065c 	.word	0x2000065c
 8003574:	20000660 	.word	0x20000660
 8003578:	08005228 	.word	0x08005228
 800357c:	08005238 	.word	0x08005238

08003580 <task_a_update>:

void task_a_update(void *parameters)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	6078      	str	r0, [r7, #4]
	 * manipulated.
	 */
	uint32_t task_a_cnt;

	/* Update Task A Counter */
	g_task_a_cnt++;
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <task_a_update+0x80>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <task_a_update+0x80>)
 8003590:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_update), p_task_a);
 8003592:	b672      	cpsid	i
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <task_a_update+0x84>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <task_a_update+0x88>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <task_a_update+0x8c>)
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <task_a_update+0x90>)
 80035a2:	213f      	movs	r1, #63	; 0x3f
 80035a4:	f000 ff06 	bl	80043b4 <sniprintf>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <task_a_update+0x94>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <task_a_update+0x84>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff8c 	bl	80034d0 <logger_log_print_>
 80035b8:	b662      	cpsie	i

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_a_cnt), g_task_a_cnt);
 80035ba:	b672      	cpsid	i
 80035bc:	4b11      	ldr	r3, [pc, #68]	; (8003604 <task_a_update+0x84>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <task_a_update+0x80>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4b14      	ldr	r3, [pc, #80]	; (8003618 <task_a_update+0x98>)
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <task_a_update+0x9c>)
 80035ca:	213f      	movs	r1, #63	; 0x3f
 80035cc:	f000 fef2 	bl	80043b4 <sniprintf>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4a10      	ldr	r2, [pc, #64]	; (8003614 <task_a_update+0x94>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <task_a_update+0x84>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff78 	bl	80034d0 <logger_log_print_>
 80035e0:	b662      	cpsie	i
	 * Blocking methods are executed synchronously.
	 * Synchronously means that the program is executed line by line.
	 * The program waits until the called function or the operation
	 * returns.
	 * */
	for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	e002      	b.n	80035ee <task_a_update+0x6e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f4:	d3f8      	bcc.n	80035e8 <task_a_update+0x68>
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000660 	.word	0x20000660
 8003604:	08005378 	.word	0x08005378
 8003608:	20000014 	.word	0x20000014
 800360c:	08005248 	.word	0x08005248
 8003610:	08005210 	.word	0x08005210
 8003614:	2000065c 	.word	0x2000065c
 8003618:	08005228 	.word	0x08005228
 800361c:	08005238 	.word	0x08005238

08003620 <task_b_init>:
/********************** external data declaration *****************************/
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
void task_b_init(void *parameters)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_init), p_task_b);
 8003628:	b672      	cpsid	i
 800362a:	4b17      	ldr	r3, [pc, #92]	; (8003688 <task_b_init+0x68>)
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <task_b_init+0x6c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <task_b_init+0x70>)
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <task_b_init+0x74>)
 8003638:	213f      	movs	r1, #63	; 0x3f
 800363a:	f000 febb 	bl	80043b4 <sniprintf>
 800363e:	4603      	mov	r3, r0
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <task_b_init+0x78>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <task_b_init+0x68>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff ff41 	bl	80034d0 <logger_log_print_>
 800364e:	b662      	cpsie	i

	g_task_b_cnt = G_TASK_B_CNT_INI;
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <task_b_init+0x7c>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_b_cnt), g_task_b_cnt);
 8003656:	b672      	cpsid	i
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <task_b_init+0x68>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <task_b_init+0x7c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <task_b_init+0x80>)
 8003664:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <task_b_init+0x84>)
 8003666:	213f      	movs	r1, #63	; 0x3f
 8003668:	f000 fea4 	bl	80043b4 <sniprintf>
 800366c:	4603      	mov	r3, r0
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <task_b_init+0x78>)
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <task_b_init+0x68>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff2a 	bl	80034d0 <logger_log_print_>
 800367c:	b662      	cpsie	i
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	08005378 	.word	0x08005378
 800368c:	20000018 	.word	0x20000018
 8003690:	08005274 	.word	0x08005274
 8003694:	08005280 	.word	0x08005280
 8003698:	2000065c 	.word	0x2000065c
 800369c:	20000664 	.word	0x20000664
 80036a0:	08005298 	.word	0x08005298
 80036a4:	080052a8 	.word	0x080052a8

080036a8 <task_b_update>:

void task_b_update(void *parameters)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
	 * scope and is not initialized again in the new scope.
	 */
	static uint32_t task_b_cnt = TASK_B_CNT_INI;

	/* Update Task B Counter */
	g_task_b_cnt++;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <task_b_update+0x84>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a1d      	ldr	r2, [pc, #116]	; (800372c <task_b_update+0x84>)
 80036b8:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_update), p_task_b);
 80036ba:	b672      	cpsid	i
 80036bc:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <task_b_update+0x88>)
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <task_b_update+0x8c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <task_b_update+0x90>)
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <task_b_update+0x94>)
 80036ca:	213f      	movs	r1, #63	; 0x3f
 80036cc:	f000 fe72 	bl	80043b4 <sniprintf>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <task_b_update+0x98>)
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <task_b_update+0x88>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fef8 	bl	80034d0 <logger_log_print_>
 80036e0:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_b_cnt), g_task_b_cnt);
 80036e2:	b672      	cpsid	i
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <task_b_update+0x88>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	4b10      	ldr	r3, [pc, #64]	; (800372c <task_b_update+0x84>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <task_b_update+0x9c>)
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <task_b_update+0xa0>)
 80036f2:	213f      	movs	r1, #63	; 0x3f
 80036f4:	f000 fe5e 	bl	80043b4 <sniprintf>
 80036f8:	4603      	mov	r3, r0
 80036fa:	4a11      	ldr	r2, [pc, #68]	; (8003740 <task_b_update+0x98>)
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <task_b_update+0x88>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fee4 	bl	80034d0 <logger_log_print_>
 8003708:	b662      	cpsie	i
	 * Asynchronously means that the program may not necessarily execute line
	 * by line.
	 * The program calls the function and move to the next operation and does
	 * not wait for it to return.
	 */
	if (task_b_cnt < TASK_B_CNT_MAX)
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <task_b_update+0xa4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b31      	cmp	r3, #49	; 0x31
 8003710:	d805      	bhi.n	800371e <task_b_update+0x76>
		task_b_cnt++;
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <task_b_update+0xa4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a0c      	ldr	r2, [pc, #48]	; (800374c <task_b_update+0xa4>)
 800371a:	6013      	str	r3, [r2, #0]
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 800371c:	e002      	b.n	8003724 <task_b_update+0x7c>
		task_b_cnt = TASK_B_CNT_INI;
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <task_b_update+0xa4>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000664 	.word	0x20000664
 8003730:	08005378 	.word	0x08005378
 8003734:	20000018 	.word	0x20000018
 8003738:	080052b8 	.word	0x080052b8
 800373c:	08005280 	.word	0x08005280
 8003740:	2000065c 	.word	0x2000065c
 8003744:	08005298 	.word	0x08005298
 8003748:	080052a8 	.word	0x080052a8
 800374c:	200000f4 	.word	0x200000f4

08003750 <task_c_init>:
uint32_t g_task_c_cnt;
volatile uint32_t g_task_c_tick_cnt;

/********************** external functions definition ************************/
void task_c_init(void *parameters)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_init), p_task_c);
 8003758:	b672      	cpsid	i
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <task_c_init+0x6c>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <task_c_init+0x70>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4b17      	ldr	r3, [pc, #92]	; (80037c4 <task_c_init+0x74>)
 8003766:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <task_c_init+0x78>)
 8003768:	213f      	movs	r1, #63	; 0x3f
 800376a:	f000 fe23 	bl	80043b4 <sniprintf>
 800376e:	4603      	mov	r3, r0
 8003770:	4a16      	ldr	r2, [pc, #88]	; (80037cc <task_c_init+0x7c>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <task_c_init+0x6c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fea9 	bl	80034d0 <logger_log_print_>
 800377e:	b662      	cpsie	i

	g_task_c_cnt = G_TASK_C_CNT_INI;
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <task_c_init+0x80>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
	g_task_c_tick_cnt = G_TASK_C_TICK_CNT_INI;
 8003786:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <task_c_init+0x84>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_c_cnt), g_task_c_cnt);
 800378c:	b672      	cpsid	i
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <task_c_init+0x6c>)
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <task_c_init+0x80>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <task_c_init+0x88>)
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <task_c_init+0x8c>)
 800379c:	213f      	movs	r1, #63	; 0x3f
 800379e:	f000 fe09 	bl	80043b4 <sniprintf>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <task_c_init+0x7c>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <task_c_init+0x6c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fe8f 	bl	80034d0 <logger_log_print_>
 80037b2:	b662      	cpsie	i
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08005378 	.word	0x08005378
 80037c0:	2000001c 	.word	0x2000001c
 80037c4:	080052e8 	.word	0x080052e8
 80037c8:	080052f4 	.word	0x080052f4
 80037cc:	2000065c 	.word	0x2000065c
 80037d0:	20000668 	.word	0x20000668
 80037d4:	2000066c 	.word	0x2000066c
 80037d8:	0800530c 	.word	0x0800530c
 80037dc:	0800531c 	.word	0x0800531c

080037e0 <task_c_update>:

void task_c_update(void *parameters)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73fb      	strb	r3, [r7, #15]

	/* Update Task C Counter */
	g_task_c_cnt++;
 80037ec:	4b29      	ldr	r3, [pc, #164]	; (8003894 <task_c_update+0xb4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	4a28      	ldr	r2, [pc, #160]	; (8003894 <task_c_update+0xb4>)
 80037f4:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_update), p_task_c);
 80037f6:	b672      	cpsid	i
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <task_c_update+0xb8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <task_c_update+0xbc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <task_c_update+0xc0>)
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <task_c_update+0xc4>)
 8003806:	213f      	movs	r1, #63	; 0x3f
 8003808:	f000 fdd4 	bl	80043b4 <sniprintf>
 800380c:	4603      	mov	r3, r0
 800380e:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <task_c_update+0xc8>)
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b21      	ldr	r3, [pc, #132]	; (8003898 <task_c_update+0xb8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fe5a 	bl	80034d0 <logger_log_print_>
 800381c:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_c_cnt), g_task_c_cnt);
 800381e:	b672      	cpsid	i
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <task_c_update+0xb8>)
 8003822:	6818      	ldr	r0, [r3, #0]
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <task_c_update+0xb4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <task_c_update+0xcc>)
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <task_c_update+0xd0>)
 800382e:	213f      	movs	r1, #63	; 0x3f
 8003830:	f000 fdc0 	bl	80043b4 <sniprintf>
 8003834:	4603      	mov	r3, r0
 8003836:	4a1c      	ldr	r2, [pc, #112]	; (80038a8 <task_c_update+0xc8>)
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <task_c_update+0xb8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff fe46 	bl	80034d0 <logger_log_print_>
 8003844:	b662      	cpsie	i

	/* Protect shared resource (g_task_c_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8003846:	b672      	cpsid	i
    if (0 < g_task_c_tick_cnt)
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <task_c_update+0xd4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <task_c_update+0x7e>
    {
    	g_task_c_tick_cnt--;
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <task_c_update+0xd4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	4a17      	ldr	r2, [pc, #92]	; (80038b4 <task_c_update+0xd4>)
 8003858:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800385e:	b662      	cpsie	i

    while (b_time_update_required)
 8003860:	e00f      	b.n	8003882 <task_c_update+0xa2>
    	 * For example, update Software Timers
    	 *
    	 */

		/* Protect shared resource (g_task_c_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8003862:	b672      	cpsid	i
		if (0 < g_task_c_tick_cnt)
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <task_c_update+0xd4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <task_c_update+0x9c>
		{
			g_task_c_tick_cnt--;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <task_c_update+0xd4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <task_c_update+0xd4>)
 8003874:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e001      	b.n	8003880 <task_c_update+0xa0>
		}
		else
		{
			b_time_update_required = false;
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003880:	b662      	cpsie	i
    while (b_time_update_required)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ec      	bne.n	8003862 <task_c_update+0x82>
	}
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000668 	.word	0x20000668
 8003898:	08005378 	.word	0x08005378
 800389c:	2000001c 	.word	0x2000001c
 80038a0:	0800532c 	.word	0x0800532c
 80038a4:	080052f4 	.word	0x080052f4
 80038a8:	2000065c 	.word	0x2000065c
 80038ac:	0800530c 	.word	0x0800530c
 80038b0:	0800531c 	.word	0x0800531c
 80038b4:	2000066c 	.word	0x2000066c

080038b8 <findslot>:
 80038b8:	4b0a      	ldr	r3, [pc, #40]	; (80038e4 <findslot+0x2c>)
 80038ba:	b510      	push	{r4, lr}
 80038bc:	4604      	mov	r4, r0
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	b118      	cbz	r0, 80038ca <findslot+0x12>
 80038c2:	6983      	ldr	r3, [r0, #24]
 80038c4:	b90b      	cbnz	r3, 80038ca <findslot+0x12>
 80038c6:	f000 fbd5 	bl	8004074 <__sinit>
 80038ca:	2c13      	cmp	r4, #19
 80038cc:	d807      	bhi.n	80038de <findslot+0x26>
 80038ce:	4806      	ldr	r0, [pc, #24]	; (80038e8 <findslot+0x30>)
 80038d0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80038d4:	3201      	adds	r2, #1
 80038d6:	d002      	beq.n	80038de <findslot+0x26>
 80038d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	2000      	movs	r0, #0
 80038e0:	e7fc      	b.n	80038dc <findslot+0x24>
 80038e2:	bf00      	nop
 80038e4:	20000028 	.word	0x20000028
 80038e8:	20000104 	.word	0x20000104

080038ec <checkerror>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	1c43      	adds	r3, r0, #1
 80038f0:	4604      	mov	r4, r0
 80038f2:	d109      	bne.n	8003908 <checkerror+0x1c>
 80038f4:	f000 fa8c 	bl	8003e10 <__errno>
 80038f8:	2613      	movs	r6, #19
 80038fa:	4605      	mov	r5, r0
 80038fc:	2700      	movs	r7, #0
 80038fe:	4630      	mov	r0, r6
 8003900:	4639      	mov	r1, r7
 8003902:	beab      	bkpt	0x00ab
 8003904:	4606      	mov	r6, r0
 8003906:	602e      	str	r6, [r5, #0]
 8003908:	4620      	mov	r0, r4
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800390c <error>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	4604      	mov	r4, r0
 8003910:	f000 fa7e 	bl	8003e10 <__errno>
 8003914:	2613      	movs	r6, #19
 8003916:	4605      	mov	r5, r0
 8003918:	2700      	movs	r7, #0
 800391a:	4630      	mov	r0, r6
 800391c:	4639      	mov	r1, r7
 800391e:	beab      	bkpt	0x00ab
 8003920:	4606      	mov	r6, r0
 8003922:	602e      	str	r6, [r5, #0]
 8003924:	4620      	mov	r0, r4
 8003926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003928 <_swiread>:
 8003928:	b530      	push	{r4, r5, lr}
 800392a:	b085      	sub	sp, #20
 800392c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003930:	9203      	str	r2, [sp, #12]
 8003932:	2406      	movs	r4, #6
 8003934:	ad01      	add	r5, sp, #4
 8003936:	4620      	mov	r0, r4
 8003938:	4629      	mov	r1, r5
 800393a:	beab      	bkpt	0x00ab
 800393c:	4604      	mov	r4, r0
 800393e:	4620      	mov	r0, r4
 8003940:	f7ff ffd4 	bl	80038ec <checkerror>
 8003944:	b005      	add	sp, #20
 8003946:	bd30      	pop	{r4, r5, pc}

08003948 <_read>:
 8003948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800394a:	4615      	mov	r5, r2
 800394c:	9101      	str	r1, [sp, #4]
 800394e:	f7ff ffb3 	bl	80038b8 <findslot>
 8003952:	9901      	ldr	r1, [sp, #4]
 8003954:	4604      	mov	r4, r0
 8003956:	b938      	cbnz	r0, 8003968 <_read+0x20>
 8003958:	f000 fa5a 	bl	8003e10 <__errno>
 800395c:	2309      	movs	r3, #9
 800395e:	6003      	str	r3, [r0, #0]
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	b003      	add	sp, #12
 8003966:	bd30      	pop	{r4, r5, pc}
 8003968:	6800      	ldr	r0, [r0, #0]
 800396a:	462a      	mov	r2, r5
 800396c:	f7ff ffdc 	bl	8003928 <_swiread>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	d0f7      	beq.n	8003964 <_read+0x1c>
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	1a2a      	subs	r2, r5, r0
 8003978:	4413      	add	r3, r2
 800397a:	6063      	str	r3, [r4, #4]
 800397c:	4610      	mov	r0, r2
 800397e:	e7f1      	b.n	8003964 <_read+0x1c>

08003980 <_swilseek>:
 8003980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003982:	460c      	mov	r4, r1
 8003984:	4616      	mov	r6, r2
 8003986:	f7ff ff97 	bl	80038b8 <findslot>
 800398a:	4605      	mov	r5, r0
 800398c:	b940      	cbnz	r0, 80039a0 <_swilseek+0x20>
 800398e:	f000 fa3f 	bl	8003e10 <__errno>
 8003992:	2309      	movs	r3, #9
 8003994:	6003      	str	r3, [r0, #0]
 8003996:	f04f 34ff 	mov.w	r4, #4294967295
 800399a:	4620      	mov	r0, r4
 800399c:	b003      	add	sp, #12
 800399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a0:	2e02      	cmp	r6, #2
 80039a2:	d903      	bls.n	80039ac <_swilseek+0x2c>
 80039a4:	f000 fa34 	bl	8003e10 <__errno>
 80039a8:	2316      	movs	r3, #22
 80039aa:	e7f3      	b.n	8003994 <_swilseek+0x14>
 80039ac:	2e01      	cmp	r6, #1
 80039ae:	d112      	bne.n	80039d6 <_swilseek+0x56>
 80039b0:	6843      	ldr	r3, [r0, #4]
 80039b2:	18e4      	adds	r4, r4, r3
 80039b4:	d4f6      	bmi.n	80039a4 <_swilseek+0x24>
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	260a      	movs	r6, #10
 80039ba:	e9cd 3400 	strd	r3, r4, [sp]
 80039be:	466f      	mov	r7, sp
 80039c0:	4630      	mov	r0, r6
 80039c2:	4639      	mov	r1, r7
 80039c4:	beab      	bkpt	0x00ab
 80039c6:	4606      	mov	r6, r0
 80039c8:	4630      	mov	r0, r6
 80039ca:	f7ff ff8f 	bl	80038ec <checkerror>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	dbe1      	blt.n	8003996 <_swilseek+0x16>
 80039d2:	606c      	str	r4, [r5, #4]
 80039d4:	e7e1      	b.n	800399a <_swilseek+0x1a>
 80039d6:	2e02      	cmp	r6, #2
 80039d8:	d1ed      	bne.n	80039b6 <_swilseek+0x36>
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	260c      	movs	r6, #12
 80039e0:	466f      	mov	r7, sp
 80039e2:	4630      	mov	r0, r6
 80039e4:	4639      	mov	r1, r7
 80039e6:	beab      	bkpt	0x00ab
 80039e8:	4606      	mov	r6, r0
 80039ea:	4630      	mov	r0, r6
 80039ec:	f7ff ff7e 	bl	80038ec <checkerror>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d0d0      	beq.n	8003996 <_swilseek+0x16>
 80039f4:	4404      	add	r4, r0
 80039f6:	e7de      	b.n	80039b6 <_swilseek+0x36>

080039f8 <_lseek>:
 80039f8:	f7ff bfc2 	b.w	8003980 <_swilseek>

080039fc <_swiwrite>:
 80039fc:	b530      	push	{r4, r5, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003a04:	9203      	str	r2, [sp, #12]
 8003a06:	2405      	movs	r4, #5
 8003a08:	ad01      	add	r5, sp, #4
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	beab      	bkpt	0x00ab
 8003a10:	4604      	mov	r4, r0
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff ff6a 	bl	80038ec <checkerror>
 8003a18:	b005      	add	sp, #20
 8003a1a:	bd30      	pop	{r4, r5, pc}

08003a1c <_write>:
 8003a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a1e:	4615      	mov	r5, r2
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	f7ff ff49 	bl	80038b8 <findslot>
 8003a26:	9901      	ldr	r1, [sp, #4]
 8003a28:	4604      	mov	r4, r0
 8003a2a:	b930      	cbnz	r0, 8003a3a <_write+0x1e>
 8003a2c:	f000 f9f0 	bl	8003e10 <__errno>
 8003a30:	2309      	movs	r3, #9
 8003a32:	6003      	str	r3, [r0, #0]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	e012      	b.n	8003a60 <_write+0x44>
 8003a3a:	6800      	ldr	r0, [r0, #0]
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	f7ff ffdd 	bl	80039fc <_swiwrite>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	dbf6      	blt.n	8003a34 <_write+0x18>
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	1a2b      	subs	r3, r5, r0
 8003a4a:	441a      	add	r2, r3
 8003a4c:	42a8      	cmp	r0, r5
 8003a4e:	6062      	str	r2, [r4, #4]
 8003a50:	d105      	bne.n	8003a5e <_write+0x42>
 8003a52:	2000      	movs	r0, #0
 8003a54:	b003      	add	sp, #12
 8003a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a5a:	f7ff bf57 	b.w	800390c <error>
 8003a5e:	4618      	mov	r0, r3
 8003a60:	b003      	add	sp, #12
 8003a62:	bd30      	pop	{r4, r5, pc}

08003a64 <_swiclose>:
 8003a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a66:	2402      	movs	r4, #2
 8003a68:	9001      	str	r0, [sp, #4]
 8003a6a:	ad01      	add	r5, sp, #4
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	4629      	mov	r1, r5
 8003a70:	beab      	bkpt	0x00ab
 8003a72:	4604      	mov	r4, r0
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7ff ff39 	bl	80038ec <checkerror>
 8003a7a:	b003      	add	sp, #12
 8003a7c:	bd30      	pop	{r4, r5, pc}
	...

08003a80 <_close>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	4605      	mov	r5, r0
 8003a84:	f7ff ff18 	bl	80038b8 <findslot>
 8003a88:	4604      	mov	r4, r0
 8003a8a:	b930      	cbnz	r0, 8003a9a <_close+0x1a>
 8003a8c:	f000 f9c0 	bl	8003e10 <__errno>
 8003a90:	2309      	movs	r3, #9
 8003a92:	6003      	str	r3, [r0, #0]
 8003a94:	f04f 30ff 	mov.w	r0, #4294967295
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	3d01      	subs	r5, #1
 8003a9c:	2d01      	cmp	r5, #1
 8003a9e:	d809      	bhi.n	8003ab4 <_close+0x34>
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <_close+0x48>)
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d104      	bne.n	8003ab4 <_close+0x34>
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	6003      	str	r3, [r0, #0]
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	e7f1      	b.n	8003a98 <_close+0x18>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	f7ff ffd5 	bl	8003a64 <_swiclose>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1ec      	bne.n	8003a98 <_close+0x18>
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	e7e8      	b.n	8003a98 <_close+0x18>
 8003ac6:	bf00      	nop
 8003ac8:	20000104 	.word	0x20000104

08003acc <_swistat>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	460c      	mov	r4, r1
 8003ad0:	f7ff fef2 	bl	80038b8 <findslot>
 8003ad4:	4605      	mov	r5, r0
 8003ad6:	b930      	cbnz	r0, 8003ae6 <_swistat+0x1a>
 8003ad8:	f000 f99a 	bl	8003e10 <__errno>
 8003adc:	2309      	movs	r3, #9
 8003ade:	6003      	str	r3, [r0, #0]
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
 8003ae6:	6863      	ldr	r3, [r4, #4]
 8003ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aec:	6063      	str	r3, [r4, #4]
 8003aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af2:	64a3      	str	r3, [r4, #72]	; 0x48
 8003af4:	260c      	movs	r6, #12
 8003af6:	4630      	mov	r0, r6
 8003af8:	4629      	mov	r1, r5
 8003afa:	beab      	bkpt	0x00ab
 8003afc:	4605      	mov	r5, r0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7ff fef4 	bl	80038ec <checkerror>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	bf1c      	itt	ne
 8003b08:	6120      	strne	r0, [r4, #16]
 8003b0a:	2000      	movne	r0, #0
 8003b0c:	e7ea      	b.n	8003ae4 <_swistat+0x18>

08003b0e <_fstat>:
 8003b0e:	460b      	mov	r3, r1
 8003b10:	b510      	push	{r4, lr}
 8003b12:	2100      	movs	r1, #0
 8003b14:	4604      	mov	r4, r0
 8003b16:	2258      	movs	r2, #88	; 0x58
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fb70 	bl	80041fe <memset>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4620      	mov	r0, r4
 8003b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b26:	f7ff bfd1 	b.w	8003acc <_swistat>

08003b2a <_stat>:
 8003b2a:	b538      	push	{r3, r4, r5, lr}
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	4604      	mov	r4, r0
 8003b30:	2258      	movs	r2, #88	; 0x58
 8003b32:	2100      	movs	r1, #0
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 fb62 	bl	80041fe <memset>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f000 f811 	bl	8003b64 <_swiopen>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	4604      	mov	r4, r0
 8003b46:	d00b      	beq.n	8003b60 <_stat+0x36>
 8003b48:	686b      	ldr	r3, [r5, #4]
 8003b4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b4e:	606b      	str	r3, [r5, #4]
 8003b50:	4629      	mov	r1, r5
 8003b52:	f7ff ffbb 	bl	8003acc <_swistat>
 8003b56:	4605      	mov	r5, r0
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f7ff ff91 	bl	8003a80 <_close>
 8003b5e:	462c      	mov	r4, r5
 8003b60:	4620      	mov	r0, r4
 8003b62:	bd38      	pop	{r3, r4, r5, pc}

08003b64 <_swiopen>:
 8003b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b68:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <_swiopen+0xb0>)
 8003b6a:	b097      	sub	sp, #92	; 0x5c
 8003b6c:	4681      	mov	r9, r0
 8003b6e:	460f      	mov	r7, r1
 8003b70:	2500      	movs	r5, #0
 8003b72:	461e      	mov	r6, r3
 8003b74:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8003b78:	1c61      	adds	r1, r4, #1
 8003b7a:	d037      	beq.n	8003bec <_swiopen+0x88>
 8003b7c:	3501      	adds	r5, #1
 8003b7e:	2d14      	cmp	r5, #20
 8003b80:	d1f8      	bne.n	8003b74 <_swiopen+0x10>
 8003b82:	f000 f945 	bl	8003e10 <__errno>
 8003b86:	2318      	movs	r3, #24
 8003b88:	6003      	str	r3, [r0, #0]
 8003b8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b8e:	e03d      	b.n	8003c0c <_swiopen+0xa8>
 8003b90:	f3c7 4400 	ubfx	r4, r7, #16, #1
 8003b94:	f240 6301 	movw	r3, #1537	; 0x601
 8003b98:	07ba      	lsls	r2, r7, #30
 8003b9a:	bf48      	it	mi
 8003b9c:	f044 0402 	orrmi.w	r4, r4, #2
 8003ba0:	421f      	tst	r7, r3
 8003ba2:	bf18      	it	ne
 8003ba4:	f044 0404 	orrne.w	r4, r4, #4
 8003ba8:	073b      	lsls	r3, r7, #28
 8003baa:	bf48      	it	mi
 8003bac:	f024 0404 	bicmi.w	r4, r4, #4
 8003bb0:	4648      	mov	r0, r9
 8003bb2:	bf48      	it	mi
 8003bb4:	f044 0408 	orrmi.w	r4, r4, #8
 8003bb8:	f8cd 9000 	str.w	r9, [sp]
 8003bbc:	f7fc fb18 	bl	80001f0 <strlen>
 8003bc0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003bc4:	2401      	movs	r4, #1
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4641      	mov	r1, r8
 8003bca:	beab      	bkpt	0x00ab
 8003bcc:	4604      	mov	r4, r0
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	db07      	blt.n	8003be2 <_swiopen+0x7e>
 8003bd2:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8003bd6:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 8003bda:	2300      	movs	r3, #0
 8003bdc:	6073      	str	r3, [r6, #4]
 8003bde:	462c      	mov	r4, r5
 8003be0:	e014      	b.n	8003c0c <_swiopen+0xa8>
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7ff fe92 	bl	800390c <error>
 8003be8:	4604      	mov	r4, r0
 8003bea:	e00f      	b.n	8003c0c <_swiopen+0xa8>
 8003bec:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 8003bf0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003bf4:	46e8      	mov	r8, sp
 8003bf6:	d1cb      	bne.n	8003b90 <_swiopen+0x2c>
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	4648      	mov	r0, r9
 8003bfc:	f7ff ff95 	bl	8003b2a <_stat>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d0c5      	beq.n	8003b90 <_swiopen+0x2c>
 8003c04:	f000 f904 	bl	8003e10 <__errno>
 8003c08:	2311      	movs	r3, #17
 8003c0a:	6003      	str	r3, [r0, #0]
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	b017      	add	sp, #92	; 0x5c
 8003c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c14:	20000104 	.word	0x20000104

08003c18 <_get_semihosting_exts>:
 8003c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	460f      	mov	r7, r1
 8003c20:	482a      	ldr	r0, [pc, #168]	; (8003ccc <_get_semihosting_exts+0xb4>)
 8003c22:	2100      	movs	r1, #0
 8003c24:	4615      	mov	r5, r2
 8003c26:	f7ff ff9d 	bl	8003b64 <_swiopen>
 8003c2a:	462a      	mov	r2, r5
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 fae4 	bl	80041fe <memset>
 8003c36:	1c63      	adds	r3, r4, #1
 8003c38:	d016      	beq.n	8003c68 <_get_semihosting_exts+0x50>
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7ff fe3c 	bl	80038b8 <findslot>
 8003c40:	f04f 090c 	mov.w	r9, #12
 8003c44:	4680      	mov	r8, r0
 8003c46:	4648      	mov	r0, r9
 8003c48:	4641      	mov	r1, r8
 8003c4a:	beab      	bkpt	0x00ab
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	4640      	mov	r0, r8
 8003c50:	f7ff fe4c 	bl	80038ec <checkerror>
 8003c54:	2803      	cmp	r0, #3
 8003c56:	dd02      	ble.n	8003c5e <_get_semihosting_exts+0x46>
 8003c58:	1ec3      	subs	r3, r0, #3
 8003c5a:	42ab      	cmp	r3, r5
 8003c5c:	dc08      	bgt.n	8003c70 <_get_semihosting_exts+0x58>
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff ff0e 	bl	8003a80 <_close>
 8003c64:	f04f 34ff 	mov.w	r4, #4294967295
 8003c68:	4620      	mov	r0, r4
 8003c6a:	b003      	add	sp, #12
 8003c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c70:	2204      	movs	r2, #4
 8003c72:	eb0d 0102 	add.w	r1, sp, r2
 8003c76:	4620      	mov	r0, r4
 8003c78:	f7ff fe66 	bl	8003948 <_read>
 8003c7c:	2803      	cmp	r0, #3
 8003c7e:	ddee      	ble.n	8003c5e <_get_semihosting_exts+0x46>
 8003c80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c84:	2b53      	cmp	r3, #83	; 0x53
 8003c86:	d1ea      	bne.n	8003c5e <_get_semihosting_exts+0x46>
 8003c88:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c8c:	2b48      	cmp	r3, #72	; 0x48
 8003c8e:	d1e6      	bne.n	8003c5e <_get_semihosting_exts+0x46>
 8003c90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c94:	2b46      	cmp	r3, #70	; 0x46
 8003c96:	d1e2      	bne.n	8003c5e <_get_semihosting_exts+0x46>
 8003c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c9c:	2b42      	cmp	r3, #66	; 0x42
 8003c9e:	d1de      	bne.n	8003c5e <_get_semihosting_exts+0x46>
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	4639      	mov	r1, r7
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff fe6b 	bl	8003980 <_swilseek>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	dbd7      	blt.n	8003c5e <_get_semihosting_exts+0x46>
 8003cae:	462a      	mov	r2, r5
 8003cb0:	4631      	mov	r1, r6
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff fe48 	bl	8003948 <_read>
 8003cb8:	4605      	mov	r5, r0
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff fee0 	bl	8003a80 <_close>
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f7ff fe13 	bl	80038ec <checkerror>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	e7ce      	b.n	8003c68 <_get_semihosting_exts+0x50>
 8003cca:	bf00      	nop
 8003ccc:	0800537c 	.word	0x0800537c

08003cd0 <initialise_semihosting_exts>:
 8003cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cd2:	4d0a      	ldr	r5, [pc, #40]	; (8003cfc <initialise_semihosting_exts+0x2c>)
 8003cd4:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <initialise_semihosting_exts+0x30>)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2201      	movs	r2, #1
 8003cda:	a801      	add	r0, sp, #4
 8003cdc:	6029      	str	r1, [r5, #0]
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	f7ff ff9a 	bl	8003c18 <_get_semihosting_exts>
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	dd07      	ble.n	8003cf8 <initialise_semihosting_exts+0x28>
 8003ce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003cec:	f003 0201 	and.w	r2, r3, #1
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	602a      	str	r2, [r5, #0]
 8003cf6:	6023      	str	r3, [r4, #0]
 8003cf8:	b003      	add	sp, #12
 8003cfa:	bd30      	pop	{r4, r5, pc}
 8003cfc:	20000020 	.word	0x20000020
 8003d00:	20000024 	.word	0x20000024

08003d04 <_has_ext_stdout_stderr>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	4c04      	ldr	r4, [pc, #16]	; (8003d18 <_has_ext_stdout_stderr+0x14>)
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	da01      	bge.n	8003d12 <_has_ext_stdout_stderr+0xe>
 8003d0e:	f7ff ffdf 	bl	8003cd0 <initialise_semihosting_exts>
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	bf00      	nop
 8003d18:	20000024 	.word	0x20000024

08003d1c <initialise_monitor_handles>:
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	b085      	sub	sp, #20
 8003d22:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003dd4 <initialise_monitor_handles+0xb8>
 8003d26:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	2400      	movs	r4, #0
 8003d2e:	9303      	str	r3, [sp, #12]
 8003d30:	f10d 0804 	add.w	r8, sp, #4
 8003d34:	9402      	str	r4, [sp, #8]
 8003d36:	2501      	movs	r5, #1
 8003d38:	4628      	mov	r0, r5
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	beab      	bkpt	0x00ab
 8003d3e:	4605      	mov	r5, r0
 8003d40:	4e20      	ldr	r6, [pc, #128]	; (8003dc4 <initialise_monitor_handles+0xa8>)
 8003d42:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <initialise_monitor_handles+0xac>)
 8003d44:	6035      	str	r5, [r6, #0]
 8003d46:	4623      	mov	r3, r4
 8003d48:	f04f 31ff 	mov.w	r1, #4294967295
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003d52:	3301      	adds	r3, #1
 8003d54:	2b14      	cmp	r3, #20
 8003d56:	d1fa      	bne.n	8003d4e <initialise_monitor_handles+0x32>
 8003d58:	f7ff ffd4 	bl	8003d04 <_has_ext_stdout_stderr>
 8003d5c:	4d1b      	ldr	r5, [pc, #108]	; (8003dcc <initialise_monitor_handles+0xb0>)
 8003d5e:	b1d0      	cbz	r0, 8003d96 <initialise_monitor_handles+0x7a>
 8003d60:	f04f 0a03 	mov.w	sl, #3
 8003d64:	2304      	movs	r3, #4
 8003d66:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d6a:	2701      	movs	r7, #1
 8003d6c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d70:	9302      	str	r3, [sp, #8]
 8003d72:	4638      	mov	r0, r7
 8003d74:	4641      	mov	r1, r8
 8003d76:	beab      	bkpt	0x00ab
 8003d78:	4683      	mov	fp, r0
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <initialise_monitor_handles+0xb4>)
 8003d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003d80:	f8c3 b000 	str.w	fp, [r3]
 8003d84:	2308      	movs	r3, #8
 8003d86:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	4641      	mov	r1, r8
 8003d90:	beab      	bkpt	0x00ab
 8003d92:	4607      	mov	r7, r0
 8003d94:	602f      	str	r7, [r5, #0]
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	bf02      	ittt	eq
 8003d9c:	4b0c      	ldreq	r3, [pc, #48]	; (8003dd0 <initialise_monitor_handles+0xb4>)
 8003d9e:	681b      	ldreq	r3, [r3, #0]
 8003da0:	602b      	streq	r3, [r5, #0]
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	2600      	movs	r6, #0
 8003da8:	6066      	str	r6, [r4, #4]
 8003daa:	f7ff ffab 	bl	8003d04 <_has_ext_stdout_stderr>
 8003dae:	b130      	cbz	r0, 8003dbe <initialise_monitor_handles+0xa2>
 8003db0:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <initialise_monitor_handles+0xb4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003dbe:	b005      	add	sp, #20
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc4:	200000fc 	.word	0x200000fc
 8003dc8:	20000104 	.word	0x20000104
 8003dcc:	200000f8 	.word	0x200000f8
 8003dd0:	20000100 	.word	0x20000100
 8003dd4:	08005392 	.word	0x08005392

08003dd8 <_isatty>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	f7ff fd6d 	bl	80038b8 <findslot>
 8003dde:	2509      	movs	r5, #9
 8003de0:	4604      	mov	r4, r0
 8003de2:	b920      	cbnz	r0, 8003dee <_isatty+0x16>
 8003de4:	f000 f814 	bl	8003e10 <__errno>
 8003de8:	6005      	str	r5, [r0, #0]
 8003dea:	4620      	mov	r0, r4
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	4628      	mov	r0, r5
 8003df0:	4621      	mov	r1, r4
 8003df2:	beab      	bkpt	0x00ab
 8003df4:	4604      	mov	r4, r0
 8003df6:	2c01      	cmp	r4, #1
 8003df8:	d0f7      	beq.n	8003dea <_isatty+0x12>
 8003dfa:	f000 f809 	bl	8003e10 <__errno>
 8003dfe:	2400      	movs	r4, #0
 8003e00:	4605      	mov	r5, r0
 8003e02:	2613      	movs	r6, #19
 8003e04:	4630      	mov	r0, r6
 8003e06:	4621      	mov	r1, r4
 8003e08:	beab      	bkpt	0x00ab
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	602e      	str	r6, [r5, #0]
 8003e0e:	e7ec      	b.n	8003dea <_isatty+0x12>

08003e10 <__errno>:
 8003e10:	4b01      	ldr	r3, [pc, #4]	; (8003e18 <__errno+0x8>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000028 	.word	0x20000028

08003e1c <__sflush_r>:
 8003e1c:	898a      	ldrh	r2, [r1, #12]
 8003e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	4605      	mov	r5, r0
 8003e24:	0710      	lsls	r0, r2, #28
 8003e26:	460c      	mov	r4, r1
 8003e28:	d458      	bmi.n	8003edc <__sflush_r+0xc0>
 8003e2a:	684b      	ldr	r3, [r1, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	dc05      	bgt.n	8003e3c <__sflush_r+0x20>
 8003e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dc02      	bgt.n	8003e3c <__sflush_r+0x20>
 8003e36:	2000      	movs	r0, #0
 8003e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e3e:	2e00      	cmp	r6, #0
 8003e40:	d0f9      	beq.n	8003e36 <__sflush_r+0x1a>
 8003e42:	2300      	movs	r3, #0
 8003e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e48:	682f      	ldr	r7, [r5, #0]
 8003e4a:	602b      	str	r3, [r5, #0]
 8003e4c:	d032      	beq.n	8003eb4 <__sflush_r+0x98>
 8003e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	075a      	lsls	r2, r3, #29
 8003e54:	d505      	bpl.n	8003e62 <__sflush_r+0x46>
 8003e56:	6863      	ldr	r3, [r4, #4]
 8003e58:	1ac0      	subs	r0, r0, r3
 8003e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e5c:	b10b      	cbz	r3, 8003e62 <__sflush_r+0x46>
 8003e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e60:	1ac0      	subs	r0, r0, r3
 8003e62:	2300      	movs	r3, #0
 8003e64:	4602      	mov	r2, r0
 8003e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e68:	6a21      	ldr	r1, [r4, #32]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	47b0      	blx	r6
 8003e6e:	1c43      	adds	r3, r0, #1
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	d106      	bne.n	8003e82 <__sflush_r+0x66>
 8003e74:	6829      	ldr	r1, [r5, #0]
 8003e76:	291d      	cmp	r1, #29
 8003e78:	d82c      	bhi.n	8003ed4 <__sflush_r+0xb8>
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <__sflush_r+0x108>)
 8003e7c:	40ca      	lsrs	r2, r1
 8003e7e:	07d6      	lsls	r6, r2, #31
 8003e80:	d528      	bpl.n	8003ed4 <__sflush_r+0xb8>
 8003e82:	2200      	movs	r2, #0
 8003e84:	6062      	str	r2, [r4, #4]
 8003e86:	04d9      	lsls	r1, r3, #19
 8003e88:	6922      	ldr	r2, [r4, #16]
 8003e8a:	6022      	str	r2, [r4, #0]
 8003e8c:	d504      	bpl.n	8003e98 <__sflush_r+0x7c>
 8003e8e:	1c42      	adds	r2, r0, #1
 8003e90:	d101      	bne.n	8003e96 <__sflush_r+0x7a>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	b903      	cbnz	r3, 8003e98 <__sflush_r+0x7c>
 8003e96:	6560      	str	r0, [r4, #84]	; 0x54
 8003e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9a:	602f      	str	r7, [r5, #0]
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d0ca      	beq.n	8003e36 <__sflush_r+0x1a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__sflush_r+0x92>
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	f000 f9b1 	bl	8004210 <_free_r>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8003eb2:	e7c1      	b.n	8003e38 <__sflush_r+0x1c>
 8003eb4:	6a21      	ldr	r1, [r4, #32]
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	4628      	mov	r0, r5
 8003eba:	47b0      	blx	r6
 8003ebc:	1c41      	adds	r1, r0, #1
 8003ebe:	d1c7      	bne.n	8003e50 <__sflush_r+0x34>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0c4      	beq.n	8003e50 <__sflush_r+0x34>
 8003ec6:	2b1d      	cmp	r3, #29
 8003ec8:	d001      	beq.n	8003ece <__sflush_r+0xb2>
 8003eca:	2b16      	cmp	r3, #22
 8003ecc:	d101      	bne.n	8003ed2 <__sflush_r+0xb6>
 8003ece:	602f      	str	r7, [r5, #0]
 8003ed0:	e7b1      	b.n	8003e36 <__sflush_r+0x1a>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	e7ad      	b.n	8003e38 <__sflush_r+0x1c>
 8003edc:	690f      	ldr	r7, [r1, #16]
 8003ede:	2f00      	cmp	r7, #0
 8003ee0:	d0a9      	beq.n	8003e36 <__sflush_r+0x1a>
 8003ee2:	0793      	lsls	r3, r2, #30
 8003ee4:	680e      	ldr	r6, [r1, #0]
 8003ee6:	bf08      	it	eq
 8003ee8:	694b      	ldreq	r3, [r1, #20]
 8003eea:	600f      	str	r7, [r1, #0]
 8003eec:	bf18      	it	ne
 8003eee:	2300      	movne	r3, #0
 8003ef0:	eba6 0807 	sub.w	r8, r6, r7
 8003ef4:	608b      	str	r3, [r1, #8]
 8003ef6:	f1b8 0f00 	cmp.w	r8, #0
 8003efa:	dd9c      	ble.n	8003e36 <__sflush_r+0x1a>
 8003efc:	6a21      	ldr	r1, [r4, #32]
 8003efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f00:	4643      	mov	r3, r8
 8003f02:	463a      	mov	r2, r7
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b0      	blx	r6
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	dc06      	bgt.n	8003f1a <__sflush_r+0xfe>
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	f04f 30ff 	mov.w	r0, #4294967295
 8003f18:	e78e      	b.n	8003e38 <__sflush_r+0x1c>
 8003f1a:	4407      	add	r7, r0
 8003f1c:	eba8 0800 	sub.w	r8, r8, r0
 8003f20:	e7e9      	b.n	8003ef6 <__sflush_r+0xda>
 8003f22:	bf00      	nop
 8003f24:	20400001 	.word	0x20400001

08003f28 <_fflush_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	690b      	ldr	r3, [r1, #16]
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b913      	cbnz	r3, 8003f38 <_fflush_r+0x10>
 8003f32:	2500      	movs	r5, #0
 8003f34:	4628      	mov	r0, r5
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	b118      	cbz	r0, 8003f42 <_fflush_r+0x1a>
 8003f3a:	6983      	ldr	r3, [r0, #24]
 8003f3c:	b90b      	cbnz	r3, 8003f42 <_fflush_r+0x1a>
 8003f3e:	f000 f899 	bl	8004074 <__sinit>
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <_fflush_r+0x6c>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d11b      	bne.n	8003f80 <_fflush_r+0x58>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0ef      	beq.n	8003f32 <_fflush_r+0xa>
 8003f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f54:	07d0      	lsls	r0, r2, #31
 8003f56:	d404      	bmi.n	8003f62 <_fflush_r+0x3a>
 8003f58:	0599      	lsls	r1, r3, #22
 8003f5a:	d402      	bmi.n	8003f62 <_fflush_r+0x3a>
 8003f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5e:	f000 f94c 	bl	80041fa <__retarget_lock_acquire_recursive>
 8003f62:	4628      	mov	r0, r5
 8003f64:	4621      	mov	r1, r4
 8003f66:	f7ff ff59 	bl	8003e1c <__sflush_r>
 8003f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f6c:	07da      	lsls	r2, r3, #31
 8003f6e:	4605      	mov	r5, r0
 8003f70:	d4e0      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	059b      	lsls	r3, r3, #22
 8003f76:	d4dd      	bmi.n	8003f34 <_fflush_r+0xc>
 8003f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f7a:	f000 f93f 	bl	80041fc <__retarget_lock_release_recursive>
 8003f7e:	e7d9      	b.n	8003f34 <_fflush_r+0xc>
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <_fflush_r+0x70>)
 8003f82:	429c      	cmp	r4, r3
 8003f84:	d101      	bne.n	8003f8a <_fflush_r+0x62>
 8003f86:	68ac      	ldr	r4, [r5, #8]
 8003f88:	e7df      	b.n	8003f4a <_fflush_r+0x22>
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <_fflush_r+0x74>)
 8003f8c:	429c      	cmp	r4, r3
 8003f8e:	bf08      	it	eq
 8003f90:	68ec      	ldreq	r4, [r5, #12]
 8003f92:	e7da      	b.n	8003f4a <_fflush_r+0x22>
 8003f94:	080053b8 	.word	0x080053b8
 8003f98:	080053d8 	.word	0x080053d8
 8003f9c:	08005398 	.word	0x08005398

08003fa0 <fflush>:
 8003fa0:	4601      	mov	r1, r0
 8003fa2:	b920      	cbnz	r0, 8003fae <fflush+0xe>
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <fflush+0x18>)
 8003fa6:	4905      	ldr	r1, [pc, #20]	; (8003fbc <fflush+0x1c>)
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	f000 b8e1 	b.w	8004170 <_fwalk_reent>
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <fflush+0x20>)
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	f7ff bfb9 	b.w	8003f28 <_fflush_r>
 8003fb6:	bf00      	nop
 8003fb8:	080053f8 	.word	0x080053f8
 8003fbc:	08003f29 	.word	0x08003f29
 8003fc0:	20000028 	.word	0x20000028

08003fc4 <std>:
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	b510      	push	{r4, lr}
 8003fc8:	4604      	mov	r4, r0
 8003fca:	e9c0 3300 	strd	r3, r3, [r0]
 8003fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fd2:	6083      	str	r3, [r0, #8]
 8003fd4:	8181      	strh	r1, [r0, #12]
 8003fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8003fd8:	81c2      	strh	r2, [r0, #14]
 8003fda:	6183      	str	r3, [r0, #24]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	2208      	movs	r2, #8
 8003fe0:	305c      	adds	r0, #92	; 0x5c
 8003fe2:	f000 f90c 	bl	80041fe <memset>
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <std+0x38>)
 8003fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <std+0x3c>)
 8003fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <std+0x40>)
 8003ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <std+0x44>)
 8003ff4:	6224      	str	r4, [r4, #32]
 8003ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ff8:	bd10      	pop	{r4, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0800441d 	.word	0x0800441d
 8004000:	0800443f 	.word	0x0800443f
 8004004:	08004477 	.word	0x08004477
 8004008:	0800449b 	.word	0x0800449b

0800400c <_cleanup_r>:
 800400c:	4901      	ldr	r1, [pc, #4]	; (8004014 <_cleanup_r+0x8>)
 800400e:	f000 b8af 	b.w	8004170 <_fwalk_reent>
 8004012:	bf00      	nop
 8004014:	08003f29 	.word	0x08003f29

08004018 <__sfmoreglue>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	1e4a      	subs	r2, r1, #1
 800401c:	2568      	movs	r5, #104	; 0x68
 800401e:	4355      	muls	r5, r2
 8004020:	460e      	mov	r6, r1
 8004022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004026:	f000 f943 	bl	80042b0 <_malloc_r>
 800402a:	4604      	mov	r4, r0
 800402c:	b140      	cbz	r0, 8004040 <__sfmoreglue+0x28>
 800402e:	2100      	movs	r1, #0
 8004030:	e9c0 1600 	strd	r1, r6, [r0]
 8004034:	300c      	adds	r0, #12
 8004036:	60a0      	str	r0, [r4, #8]
 8004038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800403c:	f000 f8df 	bl	80041fe <memset>
 8004040:	4620      	mov	r0, r4
 8004042:	bd70      	pop	{r4, r5, r6, pc}

08004044 <__sfp_lock_acquire>:
 8004044:	4801      	ldr	r0, [pc, #4]	; (800404c <__sfp_lock_acquire+0x8>)
 8004046:	f000 b8d8 	b.w	80041fa <__retarget_lock_acquire_recursive>
 800404a:	bf00      	nop
 800404c:	20000678 	.word	0x20000678

08004050 <__sfp_lock_release>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__sfp_lock_release+0x8>)
 8004052:	f000 b8d3 	b.w	80041fc <__retarget_lock_release_recursive>
 8004056:	bf00      	nop
 8004058:	20000678 	.word	0x20000678

0800405c <__sinit_lock_acquire>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__sinit_lock_acquire+0x8>)
 800405e:	f000 b8cc 	b.w	80041fa <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	20000673 	.word	0x20000673

08004068 <__sinit_lock_release>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__sinit_lock_release+0x8>)
 800406a:	f000 b8c7 	b.w	80041fc <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	20000673 	.word	0x20000673

08004074 <__sinit>:
 8004074:	b510      	push	{r4, lr}
 8004076:	4604      	mov	r4, r0
 8004078:	f7ff fff0 	bl	800405c <__sinit_lock_acquire>
 800407c:	69a3      	ldr	r3, [r4, #24]
 800407e:	b11b      	cbz	r3, 8004088 <__sinit+0x14>
 8004080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004084:	f7ff bff0 	b.w	8004068 <__sinit_lock_release>
 8004088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800408c:	6523      	str	r3, [r4, #80]	; 0x50
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <__sinit+0x68>)
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <__sinit+0x6c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62a2      	str	r2, [r4, #40]	; 0x28
 8004096:	42a3      	cmp	r3, r4
 8004098:	bf04      	itt	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	61a3      	streq	r3, [r4, #24]
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 f820 	bl	80040e4 <__sfp>
 80040a4:	6060      	str	r0, [r4, #4]
 80040a6:	4620      	mov	r0, r4
 80040a8:	f000 f81c 	bl	80040e4 <__sfp>
 80040ac:	60a0      	str	r0, [r4, #8]
 80040ae:	4620      	mov	r0, r4
 80040b0:	f000 f818 	bl	80040e4 <__sfp>
 80040b4:	2200      	movs	r2, #0
 80040b6:	60e0      	str	r0, [r4, #12]
 80040b8:	2104      	movs	r1, #4
 80040ba:	6860      	ldr	r0, [r4, #4]
 80040bc:	f7ff ff82 	bl	8003fc4 <std>
 80040c0:	68a0      	ldr	r0, [r4, #8]
 80040c2:	2201      	movs	r2, #1
 80040c4:	2109      	movs	r1, #9
 80040c6:	f7ff ff7d 	bl	8003fc4 <std>
 80040ca:	68e0      	ldr	r0, [r4, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	2112      	movs	r1, #18
 80040d0:	f7ff ff78 	bl	8003fc4 <std>
 80040d4:	2301      	movs	r3, #1
 80040d6:	61a3      	str	r3, [r4, #24]
 80040d8:	e7d2      	b.n	8004080 <__sinit+0xc>
 80040da:	bf00      	nop
 80040dc:	080053f8 	.word	0x080053f8
 80040e0:	0800400d 	.word	0x0800400d

080040e4 <__sfp>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	4607      	mov	r7, r0
 80040e8:	f7ff ffac 	bl	8004044 <__sfp_lock_acquire>
 80040ec:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <__sfp+0x84>)
 80040ee:	681e      	ldr	r6, [r3, #0]
 80040f0:	69b3      	ldr	r3, [r6, #24]
 80040f2:	b913      	cbnz	r3, 80040fa <__sfp+0x16>
 80040f4:	4630      	mov	r0, r6
 80040f6:	f7ff ffbd 	bl	8004074 <__sinit>
 80040fa:	3648      	adds	r6, #72	; 0x48
 80040fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004100:	3b01      	subs	r3, #1
 8004102:	d503      	bpl.n	800410c <__sfp+0x28>
 8004104:	6833      	ldr	r3, [r6, #0]
 8004106:	b30b      	cbz	r3, 800414c <__sfp+0x68>
 8004108:	6836      	ldr	r6, [r6, #0]
 800410a:	e7f7      	b.n	80040fc <__sfp+0x18>
 800410c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004110:	b9d5      	cbnz	r5, 8004148 <__sfp+0x64>
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <__sfp+0x88>)
 8004114:	60e3      	str	r3, [r4, #12]
 8004116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800411a:	6665      	str	r5, [r4, #100]	; 0x64
 800411c:	f000 f86c 	bl	80041f8 <__retarget_lock_init_recursive>
 8004120:	f7ff ff96 	bl	8004050 <__sfp_lock_release>
 8004124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800412c:	6025      	str	r5, [r4, #0]
 800412e:	61a5      	str	r5, [r4, #24]
 8004130:	2208      	movs	r2, #8
 8004132:	4629      	mov	r1, r5
 8004134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004138:	f000 f861 	bl	80041fe <memset>
 800413c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004144:	4620      	mov	r0, r4
 8004146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004148:	3468      	adds	r4, #104	; 0x68
 800414a:	e7d9      	b.n	8004100 <__sfp+0x1c>
 800414c:	2104      	movs	r1, #4
 800414e:	4638      	mov	r0, r7
 8004150:	f7ff ff62 	bl	8004018 <__sfmoreglue>
 8004154:	4604      	mov	r4, r0
 8004156:	6030      	str	r0, [r6, #0]
 8004158:	2800      	cmp	r0, #0
 800415a:	d1d5      	bne.n	8004108 <__sfp+0x24>
 800415c:	f7ff ff78 	bl	8004050 <__sfp_lock_release>
 8004160:	230c      	movs	r3, #12
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	e7ee      	b.n	8004144 <__sfp+0x60>
 8004166:	bf00      	nop
 8004168:	080053f8 	.word	0x080053f8
 800416c:	ffff0001 	.word	0xffff0001

08004170 <_fwalk_reent>:
 8004170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004174:	4606      	mov	r6, r0
 8004176:	4688      	mov	r8, r1
 8004178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800417c:	2700      	movs	r7, #0
 800417e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004182:	f1b9 0901 	subs.w	r9, r9, #1
 8004186:	d505      	bpl.n	8004194 <_fwalk_reent+0x24>
 8004188:	6824      	ldr	r4, [r4, #0]
 800418a:	2c00      	cmp	r4, #0
 800418c:	d1f7      	bne.n	800417e <_fwalk_reent+0xe>
 800418e:	4638      	mov	r0, r7
 8004190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004194:	89ab      	ldrh	r3, [r5, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d907      	bls.n	80041aa <_fwalk_reent+0x3a>
 800419a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800419e:	3301      	adds	r3, #1
 80041a0:	d003      	beq.n	80041aa <_fwalk_reent+0x3a>
 80041a2:	4629      	mov	r1, r5
 80041a4:	4630      	mov	r0, r6
 80041a6:	47c0      	blx	r8
 80041a8:	4307      	orrs	r7, r0
 80041aa:	3568      	adds	r5, #104	; 0x68
 80041ac:	e7e9      	b.n	8004182 <_fwalk_reent+0x12>
	...

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	; (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	; (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <__libc_init_array+0x44>)
 80041c4:	f000 ffa6 	bl	8005114 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08005438 	.word	0x08005438
 80041ec:	08005438 	.word	0x08005438
 80041f0:	08005438 	.word	0x08005438
 80041f4:	0800543c 	.word	0x0800543c

080041f8 <__retarget_lock_init_recursive>:
 80041f8:	4770      	bx	lr

080041fa <__retarget_lock_acquire_recursive>:
 80041fa:	4770      	bx	lr

080041fc <__retarget_lock_release_recursive>:
 80041fc:	4770      	bx	lr

080041fe <memset>:
 80041fe:	4402      	add	r2, r0
 8004200:	4603      	mov	r3, r0
 8004202:	4293      	cmp	r3, r2
 8004204:	d100      	bne.n	8004208 <memset+0xa>
 8004206:	4770      	bx	lr
 8004208:	f803 1b01 	strb.w	r1, [r3], #1
 800420c:	e7f9      	b.n	8004202 <memset+0x4>
	...

08004210 <_free_r>:
 8004210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004212:	2900      	cmp	r1, #0
 8004214:	d048      	beq.n	80042a8 <_free_r+0x98>
 8004216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421a:	9001      	str	r0, [sp, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f1a1 0404 	sub.w	r4, r1, #4
 8004222:	bfb8      	it	lt
 8004224:	18e4      	addlt	r4, r4, r3
 8004226:	f000 f971 	bl	800450c <__malloc_lock>
 800422a:	4a20      	ldr	r2, [pc, #128]	; (80042ac <_free_r+0x9c>)
 800422c:	9801      	ldr	r0, [sp, #4]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	4615      	mov	r5, r2
 8004232:	b933      	cbnz	r3, 8004242 <_free_r+0x32>
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	6014      	str	r4, [r2, #0]
 8004238:	b003      	add	sp, #12
 800423a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800423e:	f000 b96b 	b.w	8004518 <__malloc_unlock>
 8004242:	42a3      	cmp	r3, r4
 8004244:	d90b      	bls.n	800425e <_free_r+0x4e>
 8004246:	6821      	ldr	r1, [r4, #0]
 8004248:	1862      	adds	r2, r4, r1
 800424a:	4293      	cmp	r3, r2
 800424c:	bf04      	itt	eq
 800424e:	681a      	ldreq	r2, [r3, #0]
 8004250:	685b      	ldreq	r3, [r3, #4]
 8004252:	6063      	str	r3, [r4, #4]
 8004254:	bf04      	itt	eq
 8004256:	1852      	addeq	r2, r2, r1
 8004258:	6022      	streq	r2, [r4, #0]
 800425a:	602c      	str	r4, [r5, #0]
 800425c:	e7ec      	b.n	8004238 <_free_r+0x28>
 800425e:	461a      	mov	r2, r3
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b10b      	cbz	r3, 8004268 <_free_r+0x58>
 8004264:	42a3      	cmp	r3, r4
 8004266:	d9fa      	bls.n	800425e <_free_r+0x4e>
 8004268:	6811      	ldr	r1, [r2, #0]
 800426a:	1855      	adds	r5, r2, r1
 800426c:	42a5      	cmp	r5, r4
 800426e:	d10b      	bne.n	8004288 <_free_r+0x78>
 8004270:	6824      	ldr	r4, [r4, #0]
 8004272:	4421      	add	r1, r4
 8004274:	1854      	adds	r4, r2, r1
 8004276:	42a3      	cmp	r3, r4
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	d1dd      	bne.n	8004238 <_free_r+0x28>
 800427c:	681c      	ldr	r4, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	6053      	str	r3, [r2, #4]
 8004282:	4421      	add	r1, r4
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	e7d7      	b.n	8004238 <_free_r+0x28>
 8004288:	d902      	bls.n	8004290 <_free_r+0x80>
 800428a:	230c      	movs	r3, #12
 800428c:	6003      	str	r3, [r0, #0]
 800428e:	e7d3      	b.n	8004238 <_free_r+0x28>
 8004290:	6825      	ldr	r5, [r4, #0]
 8004292:	1961      	adds	r1, r4, r5
 8004294:	428b      	cmp	r3, r1
 8004296:	bf04      	itt	eq
 8004298:	6819      	ldreq	r1, [r3, #0]
 800429a:	685b      	ldreq	r3, [r3, #4]
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	bf04      	itt	eq
 80042a0:	1949      	addeq	r1, r1, r5
 80042a2:	6021      	streq	r1, [r4, #0]
 80042a4:	6054      	str	r4, [r2, #4]
 80042a6:	e7c7      	b.n	8004238 <_free_r+0x28>
 80042a8:	b003      	add	sp, #12
 80042aa:	bd30      	pop	{r4, r5, pc}
 80042ac:	200001a4 	.word	0x200001a4

080042b0 <_malloc_r>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	1ccd      	adds	r5, r1, #3
 80042b4:	f025 0503 	bic.w	r5, r5, #3
 80042b8:	3508      	adds	r5, #8
 80042ba:	2d0c      	cmp	r5, #12
 80042bc:	bf38      	it	cc
 80042be:	250c      	movcc	r5, #12
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	4606      	mov	r6, r0
 80042c4:	db01      	blt.n	80042ca <_malloc_r+0x1a>
 80042c6:	42a9      	cmp	r1, r5
 80042c8:	d903      	bls.n	80042d2 <_malloc_r+0x22>
 80042ca:	230c      	movs	r3, #12
 80042cc:	6033      	str	r3, [r6, #0]
 80042ce:	2000      	movs	r0, #0
 80042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042d2:	f000 f91b 	bl	800450c <__malloc_lock>
 80042d6:	4921      	ldr	r1, [pc, #132]	; (800435c <_malloc_r+0xac>)
 80042d8:	680a      	ldr	r2, [r1, #0]
 80042da:	4614      	mov	r4, r2
 80042dc:	b99c      	cbnz	r4, 8004306 <_malloc_r+0x56>
 80042de:	4f20      	ldr	r7, [pc, #128]	; (8004360 <_malloc_r+0xb0>)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	b923      	cbnz	r3, 80042ee <_malloc_r+0x3e>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4630      	mov	r0, r6
 80042e8:	f000 f854 	bl	8004394 <_sbrk_r>
 80042ec:	6038      	str	r0, [r7, #0]
 80042ee:	4629      	mov	r1, r5
 80042f0:	4630      	mov	r0, r6
 80042f2:	f000 f84f 	bl	8004394 <_sbrk_r>
 80042f6:	1c43      	adds	r3, r0, #1
 80042f8:	d123      	bne.n	8004342 <_malloc_r+0x92>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	4630      	mov	r0, r6
 8004300:	f000 f90a 	bl	8004518 <__malloc_unlock>
 8004304:	e7e3      	b.n	80042ce <_malloc_r+0x1e>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	1b5b      	subs	r3, r3, r5
 800430a:	d417      	bmi.n	800433c <_malloc_r+0x8c>
 800430c:	2b0b      	cmp	r3, #11
 800430e:	d903      	bls.n	8004318 <_malloc_r+0x68>
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	441c      	add	r4, r3
 8004314:	6025      	str	r5, [r4, #0]
 8004316:	e004      	b.n	8004322 <_malloc_r+0x72>
 8004318:	6863      	ldr	r3, [r4, #4]
 800431a:	42a2      	cmp	r2, r4
 800431c:	bf0c      	ite	eq
 800431e:	600b      	streq	r3, [r1, #0]
 8004320:	6053      	strne	r3, [r2, #4]
 8004322:	4630      	mov	r0, r6
 8004324:	f000 f8f8 	bl	8004518 <__malloc_unlock>
 8004328:	f104 000b 	add.w	r0, r4, #11
 800432c:	1d23      	adds	r3, r4, #4
 800432e:	f020 0007 	bic.w	r0, r0, #7
 8004332:	1ac2      	subs	r2, r0, r3
 8004334:	d0cc      	beq.n	80042d0 <_malloc_r+0x20>
 8004336:	1a1b      	subs	r3, r3, r0
 8004338:	50a3      	str	r3, [r4, r2]
 800433a:	e7c9      	b.n	80042d0 <_malloc_r+0x20>
 800433c:	4622      	mov	r2, r4
 800433e:	6864      	ldr	r4, [r4, #4]
 8004340:	e7cc      	b.n	80042dc <_malloc_r+0x2c>
 8004342:	1cc4      	adds	r4, r0, #3
 8004344:	f024 0403 	bic.w	r4, r4, #3
 8004348:	42a0      	cmp	r0, r4
 800434a:	d0e3      	beq.n	8004314 <_malloc_r+0x64>
 800434c:	1a21      	subs	r1, r4, r0
 800434e:	4630      	mov	r0, r6
 8004350:	f000 f820 	bl	8004394 <_sbrk_r>
 8004354:	3001      	adds	r0, #1
 8004356:	d1dd      	bne.n	8004314 <_malloc_r+0x64>
 8004358:	e7cf      	b.n	80042fa <_malloc_r+0x4a>
 800435a:	bf00      	nop
 800435c:	200001a4 	.word	0x200001a4
 8004360:	200001a8 	.word	0x200001a8

08004364 <iprintf>:
 8004364:	b40f      	push	{r0, r1, r2, r3}
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <iprintf+0x2c>)
 8004368:	b513      	push	{r0, r1, r4, lr}
 800436a:	681c      	ldr	r4, [r3, #0]
 800436c:	b124      	cbz	r4, 8004378 <iprintf+0x14>
 800436e:	69a3      	ldr	r3, [r4, #24]
 8004370:	b913      	cbnz	r3, 8004378 <iprintf+0x14>
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff fe7e 	bl	8004074 <__sinit>
 8004378:	ab05      	add	r3, sp, #20
 800437a:	9a04      	ldr	r2, [sp, #16]
 800437c:	68a1      	ldr	r1, [r4, #8]
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	4620      	mov	r0, r4
 8004382:	f000 fa55 	bl	8004830 <_vfiprintf_r>
 8004386:	b002      	add	sp, #8
 8004388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438c:	b004      	add	sp, #16
 800438e:	4770      	bx	lr
 8004390:	20000028 	.word	0x20000028

08004394 <_sbrk_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	; (80043b0 <_sbrk_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc fc84 	bl	8000cac <_sbrk>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_sbrk_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_sbrk_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	2000067c 	.word	0x2000067c

080043b4 <sniprintf>:
 80043b4:	b40c      	push	{r2, r3}
 80043b6:	b530      	push	{r4, r5, lr}
 80043b8:	4b17      	ldr	r3, [pc, #92]	; (8004418 <sniprintf+0x64>)
 80043ba:	1e0c      	subs	r4, r1, #0
 80043bc:	681d      	ldr	r5, [r3, #0]
 80043be:	b09d      	sub	sp, #116	; 0x74
 80043c0:	da08      	bge.n	80043d4 <sniprintf+0x20>
 80043c2:	238b      	movs	r3, #139	; 0x8b
 80043c4:	602b      	str	r3, [r5, #0]
 80043c6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ca:	b01d      	add	sp, #116	; 0x74
 80043cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043d0:	b002      	add	sp, #8
 80043d2:	4770      	bx	lr
 80043d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80043d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80043dc:	bf14      	ite	ne
 80043de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80043e2:	4623      	moveq	r3, r4
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	9307      	str	r3, [sp, #28]
 80043e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043ec:	9002      	str	r0, [sp, #8]
 80043ee:	9006      	str	r0, [sp, #24]
 80043f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80043f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80043f6:	ab21      	add	r3, sp, #132	; 0x84
 80043f8:	a902      	add	r1, sp, #8
 80043fa:	4628      	mov	r0, r5
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f000 f8ed 	bl	80045dc <_svfiprintf_r>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	bfbc      	itt	lt
 8004406:	238b      	movlt	r3, #139	; 0x8b
 8004408:	602b      	strlt	r3, [r5, #0]
 800440a:	2c00      	cmp	r4, #0
 800440c:	d0dd      	beq.n	80043ca <sniprintf+0x16>
 800440e:	9b02      	ldr	r3, [sp, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e7d9      	b.n	80043ca <sniprintf+0x16>
 8004416:	bf00      	nop
 8004418:	20000028 	.word	0x20000028

0800441c <__sread>:
 800441c:	b510      	push	{r4, lr}
 800441e:	460c      	mov	r4, r1
 8004420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004424:	f000 fcc8 	bl	8004db8 <_read_r>
 8004428:	2800      	cmp	r0, #0
 800442a:	bfab      	itete	ge
 800442c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800442e:	89a3      	ldrhlt	r3, [r4, #12]
 8004430:	181b      	addge	r3, r3, r0
 8004432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004436:	bfac      	ite	ge
 8004438:	6563      	strge	r3, [r4, #84]	; 0x54
 800443a:	81a3      	strhlt	r3, [r4, #12]
 800443c:	bd10      	pop	{r4, pc}

0800443e <__swrite>:
 800443e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004442:	461f      	mov	r7, r3
 8004444:	898b      	ldrh	r3, [r1, #12]
 8004446:	05db      	lsls	r3, r3, #23
 8004448:	4605      	mov	r5, r0
 800444a:	460c      	mov	r4, r1
 800444c:	4616      	mov	r6, r2
 800444e:	d505      	bpl.n	800445c <__swrite+0x1e>
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	2302      	movs	r3, #2
 8004456:	2200      	movs	r2, #0
 8004458:	f000 f846 	bl	80044e8 <_lseek_r>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	4632      	mov	r2, r6
 800446a:	463b      	mov	r3, r7
 800446c:	4628      	mov	r0, r5
 800446e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004472:	f000 b817 	b.w	80044a4 <_write_r>

08004476 <__sseek>:
 8004476:	b510      	push	{r4, lr}
 8004478:	460c      	mov	r4, r1
 800447a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447e:	f000 f833 	bl	80044e8 <_lseek_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	bf15      	itete	ne
 8004488:	6560      	strne	r0, [r4, #84]	; 0x54
 800448a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800448e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004492:	81a3      	strheq	r3, [r4, #12]
 8004494:	bf18      	it	ne
 8004496:	81a3      	strhne	r3, [r4, #12]
 8004498:	bd10      	pop	{r4, pc}

0800449a <__sclose>:
 800449a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449e:	f000 b813 	b.w	80044c8 <_close_r>
	...

080044a4 <_write_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d07      	ldr	r5, [pc, #28]	; (80044c4 <_write_r+0x20>)
 80044a8:	4604      	mov	r4, r0
 80044aa:	4608      	mov	r0, r1
 80044ac:	4611      	mov	r1, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7ff fab2 	bl	8003a1c <_write>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_write_r+0x1e>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_write_r+0x1e>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	2000067c 	.word	0x2000067c

080044c8 <_close_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4d06      	ldr	r5, [pc, #24]	; (80044e4 <_close_r+0x1c>)
 80044cc:	2300      	movs	r3, #0
 80044ce:	4604      	mov	r4, r0
 80044d0:	4608      	mov	r0, r1
 80044d2:	602b      	str	r3, [r5, #0]
 80044d4:	f7ff fad4 	bl	8003a80 <_close>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_close_r+0x1a>
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_close_r+0x1a>
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	2000067c 	.word	0x2000067c

080044e8 <_lseek_r>:
 80044e8:	b538      	push	{r3, r4, r5, lr}
 80044ea:	4d07      	ldr	r5, [pc, #28]	; (8004508 <_lseek_r+0x20>)
 80044ec:	4604      	mov	r4, r0
 80044ee:	4608      	mov	r0, r1
 80044f0:	4611      	mov	r1, r2
 80044f2:	2200      	movs	r2, #0
 80044f4:	602a      	str	r2, [r5, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	f7ff fa7e 	bl	80039f8 <_lseek>
 80044fc:	1c43      	adds	r3, r0, #1
 80044fe:	d102      	bne.n	8004506 <_lseek_r+0x1e>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	b103      	cbz	r3, 8004506 <_lseek_r+0x1e>
 8004504:	6023      	str	r3, [r4, #0]
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	2000067c 	.word	0x2000067c

0800450c <__malloc_lock>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__malloc_lock+0x8>)
 800450e:	f7ff be74 	b.w	80041fa <__retarget_lock_acquire_recursive>
 8004512:	bf00      	nop
 8004514:	20000674 	.word	0x20000674

08004518 <__malloc_unlock>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__malloc_unlock+0x8>)
 800451a:	f7ff be6f 	b.w	80041fc <__retarget_lock_release_recursive>
 800451e:	bf00      	nop
 8004520:	20000674 	.word	0x20000674

08004524 <__ssputs_r>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	688e      	ldr	r6, [r1, #8]
 800452a:	429e      	cmp	r6, r3
 800452c:	4682      	mov	sl, r0
 800452e:	460c      	mov	r4, r1
 8004530:	4690      	mov	r8, r2
 8004532:	461f      	mov	r7, r3
 8004534:	d838      	bhi.n	80045a8 <__ssputs_r+0x84>
 8004536:	898a      	ldrh	r2, [r1, #12]
 8004538:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800453c:	d032      	beq.n	80045a4 <__ssputs_r+0x80>
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	6909      	ldr	r1, [r1, #16]
 8004542:	eba5 0901 	sub.w	r9, r5, r1
 8004546:	6965      	ldr	r5, [r4, #20]
 8004548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800454c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004550:	3301      	adds	r3, #1
 8004552:	444b      	add	r3, r9
 8004554:	106d      	asrs	r5, r5, #1
 8004556:	429d      	cmp	r5, r3
 8004558:	bf38      	it	cc
 800455a:	461d      	movcc	r5, r3
 800455c:	0553      	lsls	r3, r2, #21
 800455e:	d531      	bpl.n	80045c4 <__ssputs_r+0xa0>
 8004560:	4629      	mov	r1, r5
 8004562:	f7ff fea5 	bl	80042b0 <_malloc_r>
 8004566:	4606      	mov	r6, r0
 8004568:	b950      	cbnz	r0, 8004580 <__ssputs_r+0x5c>
 800456a:	230c      	movs	r3, #12
 800456c:	f8ca 3000 	str.w	r3, [sl]
 8004570:	89a3      	ldrh	r3, [r4, #12]
 8004572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	6921      	ldr	r1, [r4, #16]
 8004582:	464a      	mov	r2, r9
 8004584:	f000 fd4e 	bl	8005024 <memcpy>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800458e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	6126      	str	r6, [r4, #16]
 8004596:	6165      	str	r5, [r4, #20]
 8004598:	444e      	add	r6, r9
 800459a:	eba5 0509 	sub.w	r5, r5, r9
 800459e:	6026      	str	r6, [r4, #0]
 80045a0:	60a5      	str	r5, [r4, #8]
 80045a2:	463e      	mov	r6, r7
 80045a4:	42be      	cmp	r6, r7
 80045a6:	d900      	bls.n	80045aa <__ssputs_r+0x86>
 80045a8:	463e      	mov	r6, r7
 80045aa:	4632      	mov	r2, r6
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	4641      	mov	r1, r8
 80045b0:	f000 fd46 	bl	8005040 <memmove>
 80045b4:	68a3      	ldr	r3, [r4, #8]
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	1b9b      	subs	r3, r3, r6
 80045ba:	4432      	add	r2, r6
 80045bc:	60a3      	str	r3, [r4, #8]
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	2000      	movs	r0, #0
 80045c2:	e7db      	b.n	800457c <__ssputs_r+0x58>
 80045c4:	462a      	mov	r2, r5
 80045c6:	f000 fd55 	bl	8005074 <_realloc_r>
 80045ca:	4606      	mov	r6, r0
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d1e1      	bne.n	8004594 <__ssputs_r+0x70>
 80045d0:	6921      	ldr	r1, [r4, #16]
 80045d2:	4650      	mov	r0, sl
 80045d4:	f7ff fe1c 	bl	8004210 <_free_r>
 80045d8:	e7c7      	b.n	800456a <__ssputs_r+0x46>
	...

080045dc <_svfiprintf_r>:
 80045dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e0:	4698      	mov	r8, r3
 80045e2:	898b      	ldrh	r3, [r1, #12]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	b09d      	sub	sp, #116	; 0x74
 80045e8:	4607      	mov	r7, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	4614      	mov	r4, r2
 80045ee:	d50e      	bpl.n	800460e <_svfiprintf_r+0x32>
 80045f0:	690b      	ldr	r3, [r1, #16]
 80045f2:	b963      	cbnz	r3, 800460e <_svfiprintf_r+0x32>
 80045f4:	2140      	movs	r1, #64	; 0x40
 80045f6:	f7ff fe5b 	bl	80042b0 <_malloc_r>
 80045fa:	6028      	str	r0, [r5, #0]
 80045fc:	6128      	str	r0, [r5, #16]
 80045fe:	b920      	cbnz	r0, 800460a <_svfiprintf_r+0x2e>
 8004600:	230c      	movs	r3, #12
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e0d1      	b.n	80047ae <_svfiprintf_r+0x1d2>
 800460a:	2340      	movs	r3, #64	; 0x40
 800460c:	616b      	str	r3, [r5, #20]
 800460e:	2300      	movs	r3, #0
 8004610:	9309      	str	r3, [sp, #36]	; 0x24
 8004612:	2320      	movs	r3, #32
 8004614:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004618:	f8cd 800c 	str.w	r8, [sp, #12]
 800461c:	2330      	movs	r3, #48	; 0x30
 800461e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80047c8 <_svfiprintf_r+0x1ec>
 8004622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004626:	f04f 0901 	mov.w	r9, #1
 800462a:	4623      	mov	r3, r4
 800462c:	469a      	mov	sl, r3
 800462e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004632:	b10a      	cbz	r2, 8004638 <_svfiprintf_r+0x5c>
 8004634:	2a25      	cmp	r2, #37	; 0x25
 8004636:	d1f9      	bne.n	800462c <_svfiprintf_r+0x50>
 8004638:	ebba 0b04 	subs.w	fp, sl, r4
 800463c:	d00b      	beq.n	8004656 <_svfiprintf_r+0x7a>
 800463e:	465b      	mov	r3, fp
 8004640:	4622      	mov	r2, r4
 8004642:	4629      	mov	r1, r5
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff ff6d 	bl	8004524 <__ssputs_r>
 800464a:	3001      	adds	r0, #1
 800464c:	f000 80aa 	beq.w	80047a4 <_svfiprintf_r+0x1c8>
 8004650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004652:	445a      	add	r2, fp
 8004654:	9209      	str	r2, [sp, #36]	; 0x24
 8004656:	f89a 3000 	ldrb.w	r3, [sl]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80a2 	beq.w	80047a4 <_svfiprintf_r+0x1c8>
 8004660:	2300      	movs	r3, #0
 8004662:	f04f 32ff 	mov.w	r2, #4294967295
 8004666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800466a:	f10a 0a01 	add.w	sl, sl, #1
 800466e:	9304      	str	r3, [sp, #16]
 8004670:	9307      	str	r3, [sp, #28]
 8004672:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004676:	931a      	str	r3, [sp, #104]	; 0x68
 8004678:	4654      	mov	r4, sl
 800467a:	2205      	movs	r2, #5
 800467c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004680:	4851      	ldr	r0, [pc, #324]	; (80047c8 <_svfiprintf_r+0x1ec>)
 8004682:	f7fb fdbd 	bl	8000200 <memchr>
 8004686:	9a04      	ldr	r2, [sp, #16]
 8004688:	b9d8      	cbnz	r0, 80046c2 <_svfiprintf_r+0xe6>
 800468a:	06d0      	lsls	r0, r2, #27
 800468c:	bf44      	itt	mi
 800468e:	2320      	movmi	r3, #32
 8004690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004694:	0711      	lsls	r1, r2, #28
 8004696:	bf44      	itt	mi
 8004698:	232b      	movmi	r3, #43	; 0x2b
 800469a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800469e:	f89a 3000 	ldrb.w	r3, [sl]
 80046a2:	2b2a      	cmp	r3, #42	; 0x2a
 80046a4:	d015      	beq.n	80046d2 <_svfiprintf_r+0xf6>
 80046a6:	9a07      	ldr	r2, [sp, #28]
 80046a8:	4654      	mov	r4, sl
 80046aa:	2000      	movs	r0, #0
 80046ac:	f04f 0c0a 	mov.w	ip, #10
 80046b0:	4621      	mov	r1, r4
 80046b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b6:	3b30      	subs	r3, #48	; 0x30
 80046b8:	2b09      	cmp	r3, #9
 80046ba:	d94e      	bls.n	800475a <_svfiprintf_r+0x17e>
 80046bc:	b1b0      	cbz	r0, 80046ec <_svfiprintf_r+0x110>
 80046be:	9207      	str	r2, [sp, #28]
 80046c0:	e014      	b.n	80046ec <_svfiprintf_r+0x110>
 80046c2:	eba0 0308 	sub.w	r3, r0, r8
 80046c6:	fa09 f303 	lsl.w	r3, r9, r3
 80046ca:	4313      	orrs	r3, r2
 80046cc:	9304      	str	r3, [sp, #16]
 80046ce:	46a2      	mov	sl, r4
 80046d0:	e7d2      	b.n	8004678 <_svfiprintf_r+0x9c>
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	1d19      	adds	r1, r3, #4
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	9103      	str	r1, [sp, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bfbb      	ittet	lt
 80046de:	425b      	neglt	r3, r3
 80046e0:	f042 0202 	orrlt.w	r2, r2, #2
 80046e4:	9307      	strge	r3, [sp, #28]
 80046e6:	9307      	strlt	r3, [sp, #28]
 80046e8:	bfb8      	it	lt
 80046ea:	9204      	strlt	r2, [sp, #16]
 80046ec:	7823      	ldrb	r3, [r4, #0]
 80046ee:	2b2e      	cmp	r3, #46	; 0x2e
 80046f0:	d10c      	bne.n	800470c <_svfiprintf_r+0x130>
 80046f2:	7863      	ldrb	r3, [r4, #1]
 80046f4:	2b2a      	cmp	r3, #42	; 0x2a
 80046f6:	d135      	bne.n	8004764 <_svfiprintf_r+0x188>
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	1d1a      	adds	r2, r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	9203      	str	r2, [sp, #12]
 8004700:	2b00      	cmp	r3, #0
 8004702:	bfb8      	it	lt
 8004704:	f04f 33ff 	movlt.w	r3, #4294967295
 8004708:	3402      	adds	r4, #2
 800470a:	9305      	str	r3, [sp, #20]
 800470c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80047d8 <_svfiprintf_r+0x1fc>
 8004710:	7821      	ldrb	r1, [r4, #0]
 8004712:	2203      	movs	r2, #3
 8004714:	4650      	mov	r0, sl
 8004716:	f7fb fd73 	bl	8000200 <memchr>
 800471a:	b140      	cbz	r0, 800472e <_svfiprintf_r+0x152>
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	eba0 000a 	sub.w	r0, r0, sl
 8004722:	fa03 f000 	lsl.w	r0, r3, r0
 8004726:	9b04      	ldr	r3, [sp, #16]
 8004728:	4303      	orrs	r3, r0
 800472a:	3401      	adds	r4, #1
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004732:	4826      	ldr	r0, [pc, #152]	; (80047cc <_svfiprintf_r+0x1f0>)
 8004734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004738:	2206      	movs	r2, #6
 800473a:	f7fb fd61 	bl	8000200 <memchr>
 800473e:	2800      	cmp	r0, #0
 8004740:	d038      	beq.n	80047b4 <_svfiprintf_r+0x1d8>
 8004742:	4b23      	ldr	r3, [pc, #140]	; (80047d0 <_svfiprintf_r+0x1f4>)
 8004744:	bb1b      	cbnz	r3, 800478e <_svfiprintf_r+0x1b2>
 8004746:	9b03      	ldr	r3, [sp, #12]
 8004748:	3307      	adds	r3, #7
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	3308      	adds	r3, #8
 8004750:	9303      	str	r3, [sp, #12]
 8004752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004754:	4433      	add	r3, r6
 8004756:	9309      	str	r3, [sp, #36]	; 0x24
 8004758:	e767      	b.n	800462a <_svfiprintf_r+0x4e>
 800475a:	fb0c 3202 	mla	r2, ip, r2, r3
 800475e:	460c      	mov	r4, r1
 8004760:	2001      	movs	r0, #1
 8004762:	e7a5      	b.n	80046b0 <_svfiprintf_r+0xd4>
 8004764:	2300      	movs	r3, #0
 8004766:	3401      	adds	r4, #1
 8004768:	9305      	str	r3, [sp, #20]
 800476a:	4619      	mov	r1, r3
 800476c:	f04f 0c0a 	mov.w	ip, #10
 8004770:	4620      	mov	r0, r4
 8004772:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004776:	3a30      	subs	r2, #48	; 0x30
 8004778:	2a09      	cmp	r2, #9
 800477a:	d903      	bls.n	8004784 <_svfiprintf_r+0x1a8>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0c5      	beq.n	800470c <_svfiprintf_r+0x130>
 8004780:	9105      	str	r1, [sp, #20]
 8004782:	e7c3      	b.n	800470c <_svfiprintf_r+0x130>
 8004784:	fb0c 2101 	mla	r1, ip, r1, r2
 8004788:	4604      	mov	r4, r0
 800478a:	2301      	movs	r3, #1
 800478c:	e7f0      	b.n	8004770 <_svfiprintf_r+0x194>
 800478e:	ab03      	add	r3, sp, #12
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	462a      	mov	r2, r5
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <_svfiprintf_r+0x1f8>)
 8004796:	a904      	add	r1, sp, #16
 8004798:	4638      	mov	r0, r7
 800479a:	f3af 8000 	nop.w
 800479e:	1c42      	adds	r2, r0, #1
 80047a0:	4606      	mov	r6, r0
 80047a2:	d1d6      	bne.n	8004752 <_svfiprintf_r+0x176>
 80047a4:	89ab      	ldrh	r3, [r5, #12]
 80047a6:	065b      	lsls	r3, r3, #25
 80047a8:	f53f af2c 	bmi.w	8004604 <_svfiprintf_r+0x28>
 80047ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ae:	b01d      	add	sp, #116	; 0x74
 80047b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047b4:	ab03      	add	r3, sp, #12
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	462a      	mov	r2, r5
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <_svfiprintf_r+0x1f8>)
 80047bc:	a904      	add	r1, sp, #16
 80047be:	4638      	mov	r0, r7
 80047c0:	f000 f9d4 	bl	8004b6c <_printf_i>
 80047c4:	e7eb      	b.n	800479e <_svfiprintf_r+0x1c2>
 80047c6:	bf00      	nop
 80047c8:	080053fc 	.word	0x080053fc
 80047cc:	08005406 	.word	0x08005406
 80047d0:	00000000 	.word	0x00000000
 80047d4:	08004525 	.word	0x08004525
 80047d8:	08005402 	.word	0x08005402

080047dc <__sfputc_r>:
 80047dc:	6893      	ldr	r3, [r2, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	b410      	push	{r4}
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	da08      	bge.n	80047fa <__sfputc_r+0x1e>
 80047e8:	6994      	ldr	r4, [r2, #24]
 80047ea:	42a3      	cmp	r3, r4
 80047ec:	db01      	blt.n	80047f2 <__sfputc_r+0x16>
 80047ee:	290a      	cmp	r1, #10
 80047f0:	d103      	bne.n	80047fa <__sfputc_r+0x1e>
 80047f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f6:	f000 baf1 	b.w	8004ddc <__swbuf_r>
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	1c58      	adds	r0, r3, #1
 80047fe:	6010      	str	r0, [r2, #0]
 8004800:	7019      	strb	r1, [r3, #0]
 8004802:	4608      	mov	r0, r1
 8004804:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004808:	4770      	bx	lr

0800480a <__sfputs_r>:
 800480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480c:	4606      	mov	r6, r0
 800480e:	460f      	mov	r7, r1
 8004810:	4614      	mov	r4, r2
 8004812:	18d5      	adds	r5, r2, r3
 8004814:	42ac      	cmp	r4, r5
 8004816:	d101      	bne.n	800481c <__sfputs_r+0x12>
 8004818:	2000      	movs	r0, #0
 800481a:	e007      	b.n	800482c <__sfputs_r+0x22>
 800481c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004820:	463a      	mov	r2, r7
 8004822:	4630      	mov	r0, r6
 8004824:	f7ff ffda 	bl	80047dc <__sfputc_r>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d1f3      	bne.n	8004814 <__sfputs_r+0xa>
 800482c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004830 <_vfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	460d      	mov	r5, r1
 8004836:	b09d      	sub	sp, #116	; 0x74
 8004838:	4614      	mov	r4, r2
 800483a:	4698      	mov	r8, r3
 800483c:	4606      	mov	r6, r0
 800483e:	b118      	cbz	r0, 8004848 <_vfiprintf_r+0x18>
 8004840:	6983      	ldr	r3, [r0, #24]
 8004842:	b90b      	cbnz	r3, 8004848 <_vfiprintf_r+0x18>
 8004844:	f7ff fc16 	bl	8004074 <__sinit>
 8004848:	4b89      	ldr	r3, [pc, #548]	; (8004a70 <_vfiprintf_r+0x240>)
 800484a:	429d      	cmp	r5, r3
 800484c:	d11b      	bne.n	8004886 <_vfiprintf_r+0x56>
 800484e:	6875      	ldr	r5, [r6, #4]
 8004850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004852:	07d9      	lsls	r1, r3, #31
 8004854:	d405      	bmi.n	8004862 <_vfiprintf_r+0x32>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	059a      	lsls	r2, r3, #22
 800485a:	d402      	bmi.n	8004862 <_vfiprintf_r+0x32>
 800485c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800485e:	f7ff fccc 	bl	80041fa <__retarget_lock_acquire_recursive>
 8004862:	89ab      	ldrh	r3, [r5, #12]
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	d501      	bpl.n	800486c <_vfiprintf_r+0x3c>
 8004868:	692b      	ldr	r3, [r5, #16]
 800486a:	b9eb      	cbnz	r3, 80048a8 <_vfiprintf_r+0x78>
 800486c:	4629      	mov	r1, r5
 800486e:	4630      	mov	r0, r6
 8004870:	f000 fb06 	bl	8004e80 <__swsetup_r>
 8004874:	b1c0      	cbz	r0, 80048a8 <_vfiprintf_r+0x78>
 8004876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004878:	07dc      	lsls	r4, r3, #31
 800487a:	d50e      	bpl.n	800489a <_vfiprintf_r+0x6a>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	b01d      	add	sp, #116	; 0x74
 8004882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004886:	4b7b      	ldr	r3, [pc, #492]	; (8004a74 <_vfiprintf_r+0x244>)
 8004888:	429d      	cmp	r5, r3
 800488a:	d101      	bne.n	8004890 <_vfiprintf_r+0x60>
 800488c:	68b5      	ldr	r5, [r6, #8]
 800488e:	e7df      	b.n	8004850 <_vfiprintf_r+0x20>
 8004890:	4b79      	ldr	r3, [pc, #484]	; (8004a78 <_vfiprintf_r+0x248>)
 8004892:	429d      	cmp	r5, r3
 8004894:	bf08      	it	eq
 8004896:	68f5      	ldreq	r5, [r6, #12]
 8004898:	e7da      	b.n	8004850 <_vfiprintf_r+0x20>
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	0598      	lsls	r0, r3, #22
 800489e:	d4ed      	bmi.n	800487c <_vfiprintf_r+0x4c>
 80048a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048a2:	f7ff fcab 	bl	80041fc <__retarget_lock_release_recursive>
 80048a6:	e7e9      	b.n	800487c <_vfiprintf_r+0x4c>
 80048a8:	2300      	movs	r3, #0
 80048aa:	9309      	str	r3, [sp, #36]	; 0x24
 80048ac:	2320      	movs	r3, #32
 80048ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048b6:	2330      	movs	r3, #48	; 0x30
 80048b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a7c <_vfiprintf_r+0x24c>
 80048bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048c0:	f04f 0901 	mov.w	r9, #1
 80048c4:	4623      	mov	r3, r4
 80048c6:	469a      	mov	sl, r3
 80048c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048cc:	b10a      	cbz	r2, 80048d2 <_vfiprintf_r+0xa2>
 80048ce:	2a25      	cmp	r2, #37	; 0x25
 80048d0:	d1f9      	bne.n	80048c6 <_vfiprintf_r+0x96>
 80048d2:	ebba 0b04 	subs.w	fp, sl, r4
 80048d6:	d00b      	beq.n	80048f0 <_vfiprintf_r+0xc0>
 80048d8:	465b      	mov	r3, fp
 80048da:	4622      	mov	r2, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	4630      	mov	r0, r6
 80048e0:	f7ff ff93 	bl	800480a <__sfputs_r>
 80048e4:	3001      	adds	r0, #1
 80048e6:	f000 80aa 	beq.w	8004a3e <_vfiprintf_r+0x20e>
 80048ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ec:	445a      	add	r2, fp
 80048ee:	9209      	str	r2, [sp, #36]	; 0x24
 80048f0:	f89a 3000 	ldrb.w	r3, [sl]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80a2 	beq.w	8004a3e <_vfiprintf_r+0x20e>
 80048fa:	2300      	movs	r3, #0
 80048fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004904:	f10a 0a01 	add.w	sl, sl, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	9307      	str	r3, [sp, #28]
 800490c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004910:	931a      	str	r3, [sp, #104]	; 0x68
 8004912:	4654      	mov	r4, sl
 8004914:	2205      	movs	r2, #5
 8004916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491a:	4858      	ldr	r0, [pc, #352]	; (8004a7c <_vfiprintf_r+0x24c>)
 800491c:	f7fb fc70 	bl	8000200 <memchr>
 8004920:	9a04      	ldr	r2, [sp, #16]
 8004922:	b9d8      	cbnz	r0, 800495c <_vfiprintf_r+0x12c>
 8004924:	06d1      	lsls	r1, r2, #27
 8004926:	bf44      	itt	mi
 8004928:	2320      	movmi	r3, #32
 800492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492e:	0713      	lsls	r3, r2, #28
 8004930:	bf44      	itt	mi
 8004932:	232b      	movmi	r3, #43	; 0x2b
 8004934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004938:	f89a 3000 	ldrb.w	r3, [sl]
 800493c:	2b2a      	cmp	r3, #42	; 0x2a
 800493e:	d015      	beq.n	800496c <_vfiprintf_r+0x13c>
 8004940:	9a07      	ldr	r2, [sp, #28]
 8004942:	4654      	mov	r4, sl
 8004944:	2000      	movs	r0, #0
 8004946:	f04f 0c0a 	mov.w	ip, #10
 800494a:	4621      	mov	r1, r4
 800494c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004950:	3b30      	subs	r3, #48	; 0x30
 8004952:	2b09      	cmp	r3, #9
 8004954:	d94e      	bls.n	80049f4 <_vfiprintf_r+0x1c4>
 8004956:	b1b0      	cbz	r0, 8004986 <_vfiprintf_r+0x156>
 8004958:	9207      	str	r2, [sp, #28]
 800495a:	e014      	b.n	8004986 <_vfiprintf_r+0x156>
 800495c:	eba0 0308 	sub.w	r3, r0, r8
 8004960:	fa09 f303 	lsl.w	r3, r9, r3
 8004964:	4313      	orrs	r3, r2
 8004966:	9304      	str	r3, [sp, #16]
 8004968:	46a2      	mov	sl, r4
 800496a:	e7d2      	b.n	8004912 <_vfiprintf_r+0xe2>
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	1d19      	adds	r1, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	9103      	str	r1, [sp, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfbb      	ittet	lt
 8004978:	425b      	neglt	r3, r3
 800497a:	f042 0202 	orrlt.w	r2, r2, #2
 800497e:	9307      	strge	r3, [sp, #28]
 8004980:	9307      	strlt	r3, [sp, #28]
 8004982:	bfb8      	it	lt
 8004984:	9204      	strlt	r2, [sp, #16]
 8004986:	7823      	ldrb	r3, [r4, #0]
 8004988:	2b2e      	cmp	r3, #46	; 0x2e
 800498a:	d10c      	bne.n	80049a6 <_vfiprintf_r+0x176>
 800498c:	7863      	ldrb	r3, [r4, #1]
 800498e:	2b2a      	cmp	r3, #42	; 0x2a
 8004990:	d135      	bne.n	80049fe <_vfiprintf_r+0x1ce>
 8004992:	9b03      	ldr	r3, [sp, #12]
 8004994:	1d1a      	adds	r2, r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	9203      	str	r2, [sp, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	bfb8      	it	lt
 800499e:	f04f 33ff 	movlt.w	r3, #4294967295
 80049a2:	3402      	adds	r4, #2
 80049a4:	9305      	str	r3, [sp, #20]
 80049a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a8c <_vfiprintf_r+0x25c>
 80049aa:	7821      	ldrb	r1, [r4, #0]
 80049ac:	2203      	movs	r2, #3
 80049ae:	4650      	mov	r0, sl
 80049b0:	f7fb fc26 	bl	8000200 <memchr>
 80049b4:	b140      	cbz	r0, 80049c8 <_vfiprintf_r+0x198>
 80049b6:	2340      	movs	r3, #64	; 0x40
 80049b8:	eba0 000a 	sub.w	r0, r0, sl
 80049bc:	fa03 f000 	lsl.w	r0, r3, r0
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	4303      	orrs	r3, r0
 80049c4:	3401      	adds	r4, #1
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049cc:	482c      	ldr	r0, [pc, #176]	; (8004a80 <_vfiprintf_r+0x250>)
 80049ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049d2:	2206      	movs	r2, #6
 80049d4:	f7fb fc14 	bl	8000200 <memchr>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d03f      	beq.n	8004a5c <_vfiprintf_r+0x22c>
 80049dc:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <_vfiprintf_r+0x254>)
 80049de:	bb1b      	cbnz	r3, 8004a28 <_vfiprintf_r+0x1f8>
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	3307      	adds	r3, #7
 80049e4:	f023 0307 	bic.w	r3, r3, #7
 80049e8:	3308      	adds	r3, #8
 80049ea:	9303      	str	r3, [sp, #12]
 80049ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ee:	443b      	add	r3, r7
 80049f0:	9309      	str	r3, [sp, #36]	; 0x24
 80049f2:	e767      	b.n	80048c4 <_vfiprintf_r+0x94>
 80049f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f8:	460c      	mov	r4, r1
 80049fa:	2001      	movs	r0, #1
 80049fc:	e7a5      	b.n	800494a <_vfiprintf_r+0x11a>
 80049fe:	2300      	movs	r3, #0
 8004a00:	3401      	adds	r4, #1
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	4619      	mov	r1, r3
 8004a06:	f04f 0c0a 	mov.w	ip, #10
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a10:	3a30      	subs	r2, #48	; 0x30
 8004a12:	2a09      	cmp	r2, #9
 8004a14:	d903      	bls.n	8004a1e <_vfiprintf_r+0x1ee>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0c5      	beq.n	80049a6 <_vfiprintf_r+0x176>
 8004a1a:	9105      	str	r1, [sp, #20]
 8004a1c:	e7c3      	b.n	80049a6 <_vfiprintf_r+0x176>
 8004a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a22:	4604      	mov	r4, r0
 8004a24:	2301      	movs	r3, #1
 8004a26:	e7f0      	b.n	8004a0a <_vfiprintf_r+0x1da>
 8004a28:	ab03      	add	r3, sp, #12
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4b16      	ldr	r3, [pc, #88]	; (8004a88 <_vfiprintf_r+0x258>)
 8004a30:	a904      	add	r1, sp, #16
 8004a32:	4630      	mov	r0, r6
 8004a34:	f3af 8000 	nop.w
 8004a38:	4607      	mov	r7, r0
 8004a3a:	1c78      	adds	r0, r7, #1
 8004a3c:	d1d6      	bne.n	80049ec <_vfiprintf_r+0x1bc>
 8004a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a40:	07d9      	lsls	r1, r3, #31
 8004a42:	d405      	bmi.n	8004a50 <_vfiprintf_r+0x220>
 8004a44:	89ab      	ldrh	r3, [r5, #12]
 8004a46:	059a      	lsls	r2, r3, #22
 8004a48:	d402      	bmi.n	8004a50 <_vfiprintf_r+0x220>
 8004a4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a4c:	f7ff fbd6 	bl	80041fc <__retarget_lock_release_recursive>
 8004a50:	89ab      	ldrh	r3, [r5, #12]
 8004a52:	065b      	lsls	r3, r3, #25
 8004a54:	f53f af12 	bmi.w	800487c <_vfiprintf_r+0x4c>
 8004a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a5a:	e711      	b.n	8004880 <_vfiprintf_r+0x50>
 8004a5c:	ab03      	add	r3, sp, #12
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	462a      	mov	r2, r5
 8004a62:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <_vfiprintf_r+0x258>)
 8004a64:	a904      	add	r1, sp, #16
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 f880 	bl	8004b6c <_printf_i>
 8004a6c:	e7e4      	b.n	8004a38 <_vfiprintf_r+0x208>
 8004a6e:	bf00      	nop
 8004a70:	080053b8 	.word	0x080053b8
 8004a74:	080053d8 	.word	0x080053d8
 8004a78:	08005398 	.word	0x08005398
 8004a7c:	080053fc 	.word	0x080053fc
 8004a80:	08005406 	.word	0x08005406
 8004a84:	00000000 	.word	0x00000000
 8004a88:	0800480b 	.word	0x0800480b
 8004a8c:	08005402 	.word	0x08005402

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4699      	mov	r9, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004adc:	1e13      	subs	r3, r2, #0
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aec:	4649      	mov	r1, r9
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c0      	blx	r8
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	68e5      	ldr	r5, [r4, #12]
 8004afa:	6832      	ldr	r2, [r6, #0]
 8004afc:	f003 0306 	and.w	r3, r3, #6
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	bf08      	it	eq
 8004b04:	1aad      	subeq	r5, r5, r2
 8004b06:	68a3      	ldr	r3, [r4, #8]
 8004b08:	6922      	ldr	r2, [r4, #16]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c0      	blx	r8
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	; 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4649      	mov	r1, r9
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c0      	blx	r8
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	460c      	mov	r4, r1
 8004b72:	4691      	mov	r9, r2
 8004b74:	7e27      	ldrb	r7, [r4, #24]
 8004b76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b78:	2f78      	cmp	r7, #120	; 0x78
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	; 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d8 	beq.w	8004d3e <_printf_i+0x1d2>
 8004b8e:	2f58      	cmp	r7, #88	; 0x58
 8004b90:	f000 80a3 	beq.w	8004cda <_printf_i+0x16e>
 8004b94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a001      	add	r0, pc, #4	; (adr r0, 8004bac <_printf_i+0x40>)
 8004ba8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d25 	.word	0x08004d25
 8004bdc:	08004c49 	.word	0x08004c49
 8004be0:	08004d07 	.word	0x08004d07
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d47 	.word	0x08004d47
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c49 	.word	0x08004c49
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004d0f 	.word	0x08004d0f
 8004c04:	680b      	ldr	r3, [r1, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	600a      	str	r2, [r1, #0]
 8004c0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0a3      	b.n	8004d60 <_printf_i+0x1f4>
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	6808      	ldr	r0, [r1, #0]
 8004c1c:	062e      	lsls	r6, r5, #24
 8004c1e:	f100 0304 	add.w	r3, r0, #4
 8004c22:	d50a      	bpl.n	8004c3a <_printf_i+0xce>
 8004c24:	6805      	ldr	r5, [r0, #0]
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	da03      	bge.n	8004c34 <_printf_i+0xc8>
 8004c2c:	232d      	movs	r3, #45	; 0x2d
 8004c2e:	426d      	negs	r5, r5
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c34:	485e      	ldr	r0, [pc, #376]	; (8004db0 <_printf_i+0x244>)
 8004c36:	230a      	movs	r3, #10
 8004c38:	e019      	b.n	8004c6e <_printf_i+0x102>
 8004c3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c3e:	6805      	ldr	r5, [r0, #0]
 8004c40:	600b      	str	r3, [r1, #0]
 8004c42:	bf18      	it	ne
 8004c44:	b22d      	sxthne	r5, r5
 8004c46:	e7ef      	b.n	8004c28 <_printf_i+0xbc>
 8004c48:	680b      	ldr	r3, [r1, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	1d18      	adds	r0, r3, #4
 8004c4e:	6008      	str	r0, [r1, #0]
 8004c50:	0628      	lsls	r0, r5, #24
 8004c52:	d501      	bpl.n	8004c58 <_printf_i+0xec>
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	e002      	b.n	8004c5e <_printf_i+0xf2>
 8004c58:	0669      	lsls	r1, r5, #25
 8004c5a:	d5fb      	bpl.n	8004c54 <_printf_i+0xe8>
 8004c5c:	881d      	ldrh	r5, [r3, #0]
 8004c5e:	4854      	ldr	r0, [pc, #336]	; (8004db0 <_printf_i+0x244>)
 8004c60:	2f6f      	cmp	r7, #111	; 0x6f
 8004c62:	bf0c      	ite	eq
 8004c64:	2308      	moveq	r3, #8
 8004c66:	230a      	movne	r3, #10
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c6e:	6866      	ldr	r6, [r4, #4]
 8004c70:	60a6      	str	r6, [r4, #8]
 8004c72:	2e00      	cmp	r6, #0
 8004c74:	bfa2      	ittt	ge
 8004c76:	6821      	ldrge	r1, [r4, #0]
 8004c78:	f021 0104 	bicge.w	r1, r1, #4
 8004c7c:	6021      	strge	r1, [r4, #0]
 8004c7e:	b90d      	cbnz	r5, 8004c84 <_printf_i+0x118>
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	d04d      	beq.n	8004d20 <_printf_i+0x1b4>
 8004c84:	4616      	mov	r6, r2
 8004c86:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c8a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c8e:	5dc7      	ldrb	r7, [r0, r7]
 8004c90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c94:	462f      	mov	r7, r5
 8004c96:	42bb      	cmp	r3, r7
 8004c98:	460d      	mov	r5, r1
 8004c9a:	d9f4      	bls.n	8004c86 <_printf_i+0x11a>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d10b      	bne.n	8004cb8 <_printf_i+0x14c>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07df      	lsls	r7, r3, #31
 8004ca4:	d508      	bpl.n	8004cb8 <_printf_i+0x14c>
 8004ca6:	6923      	ldr	r3, [r4, #16]
 8004ca8:	6861      	ldr	r1, [r4, #4]
 8004caa:	4299      	cmp	r1, r3
 8004cac:	bfde      	ittt	le
 8004cae:	2330      	movle	r3, #48	; 0x30
 8004cb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb8:	1b92      	subs	r2, r2, r6
 8004cba:	6122      	str	r2, [r4, #16]
 8004cbc:	f8cd a000 	str.w	sl, [sp]
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	aa03      	add	r2, sp, #12
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fee2 	bl	8004a90 <_printf_common>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d14c      	bne.n	8004d6a <_printf_i+0x1fe>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	b004      	add	sp, #16
 8004cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cda:	4835      	ldr	r0, [pc, #212]	; (8004db0 <_printf_i+0x244>)
 8004cdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	680e      	ldr	r6, [r1, #0]
 8004ce4:	061f      	lsls	r7, r3, #24
 8004ce6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cea:	600e      	str	r6, [r1, #0]
 8004cec:	d514      	bpl.n	8004d18 <_printf_i+0x1ac>
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	bf44      	itt	mi
 8004cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf6:	6023      	strmi	r3, [r4, #0]
 8004cf8:	b91d      	cbnz	r5, 8004d02 <_printf_i+0x196>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f023 0320 	bic.w	r3, r3, #32
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	2310      	movs	r3, #16
 8004d04:	e7b0      	b.n	8004c68 <_printf_i+0xfc>
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f043 0320 	orr.w	r3, r3, #32
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2378      	movs	r3, #120	; 0x78
 8004d10:	4828      	ldr	r0, [pc, #160]	; (8004db4 <_printf_i+0x248>)
 8004d12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d16:	e7e3      	b.n	8004ce0 <_printf_i+0x174>
 8004d18:	065e      	lsls	r6, r3, #25
 8004d1a:	bf48      	it	mi
 8004d1c:	b2ad      	uxthmi	r5, r5
 8004d1e:	e7e6      	b.n	8004cee <_printf_i+0x182>
 8004d20:	4616      	mov	r6, r2
 8004d22:	e7bb      	b.n	8004c9c <_printf_i+0x130>
 8004d24:	680b      	ldr	r3, [r1, #0]
 8004d26:	6826      	ldr	r6, [r4, #0]
 8004d28:	6960      	ldr	r0, [r4, #20]
 8004d2a:	1d1d      	adds	r5, r3, #4
 8004d2c:	600d      	str	r5, [r1, #0]
 8004d2e:	0635      	lsls	r5, r6, #24
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	d501      	bpl.n	8004d38 <_printf_i+0x1cc>
 8004d34:	6018      	str	r0, [r3, #0]
 8004d36:	e002      	b.n	8004d3e <_printf_i+0x1d2>
 8004d38:	0671      	lsls	r1, r6, #25
 8004d3a:	d5fb      	bpl.n	8004d34 <_printf_i+0x1c8>
 8004d3c:	8018      	strh	r0, [r3, #0]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	4616      	mov	r6, r2
 8004d44:	e7ba      	b.n	8004cbc <_printf_i+0x150>
 8004d46:	680b      	ldr	r3, [r1, #0]
 8004d48:	1d1a      	adds	r2, r3, #4
 8004d4a:	600a      	str	r2, [r1, #0]
 8004d4c:	681e      	ldr	r6, [r3, #0]
 8004d4e:	6862      	ldr	r2, [r4, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7fb fa54 	bl	8000200 <memchr>
 8004d58:	b108      	cbz	r0, 8004d5e <_printf_i+0x1f2>
 8004d5a:	1b80      	subs	r0, r0, r6
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	2300      	movs	r3, #0
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d68:	e7a8      	b.n	8004cbc <_printf_i+0x150>
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4640      	mov	r0, r8
 8004d72:	47d0      	blx	sl
 8004d74:	3001      	adds	r0, #1
 8004d76:	d0ab      	beq.n	8004cd0 <_printf_i+0x164>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079b      	lsls	r3, r3, #30
 8004d7c:	d413      	bmi.n	8004da6 <_printf_i+0x23a>
 8004d7e:	68e0      	ldr	r0, [r4, #12]
 8004d80:	9b03      	ldr	r3, [sp, #12]
 8004d82:	4298      	cmp	r0, r3
 8004d84:	bfb8      	it	lt
 8004d86:	4618      	movlt	r0, r3
 8004d88:	e7a4      	b.n	8004cd4 <_printf_i+0x168>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4640      	mov	r0, r8
 8004d92:	47d0      	blx	sl
 8004d94:	3001      	adds	r0, #1
 8004d96:	d09b      	beq.n	8004cd0 <_printf_i+0x164>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	9903      	ldr	r1, [sp, #12]
 8004d9e:	1a5b      	subs	r3, r3, r1
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dcf2      	bgt.n	8004d8a <_printf_i+0x21e>
 8004da4:	e7eb      	b.n	8004d7e <_printf_i+0x212>
 8004da6:	2500      	movs	r5, #0
 8004da8:	f104 0619 	add.w	r6, r4, #25
 8004dac:	e7f5      	b.n	8004d9a <_printf_i+0x22e>
 8004dae:	bf00      	nop
 8004db0:	0800540d 	.word	0x0800540d
 8004db4:	0800541e 	.word	0x0800541e

08004db8 <_read_r>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
 8004dba:	4d07      	ldr	r5, [pc, #28]	; (8004dd8 <_read_r+0x20>)
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	4608      	mov	r0, r1
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	602a      	str	r2, [r5, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f7fe fdbe 	bl	8003948 <_read>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_read_r+0x1e>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_read_r+0x1e>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	2000067c 	.word	0x2000067c

08004ddc <__swbuf_r>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	460e      	mov	r6, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	4605      	mov	r5, r0
 8004de4:	b118      	cbz	r0, 8004dee <__swbuf_r+0x12>
 8004de6:	6983      	ldr	r3, [r0, #24]
 8004de8:	b90b      	cbnz	r3, 8004dee <__swbuf_r+0x12>
 8004dea:	f7ff f943 	bl	8004074 <__sinit>
 8004dee:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <__swbuf_r+0x98>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d12b      	bne.n	8004e4c <__swbuf_r+0x70>
 8004df4:	686c      	ldr	r4, [r5, #4]
 8004df6:	69a3      	ldr	r3, [r4, #24]
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	071a      	lsls	r2, r3, #28
 8004dfe:	d52f      	bpl.n	8004e60 <__swbuf_r+0x84>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	b36b      	cbz	r3, 8004e60 <__swbuf_r+0x84>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	1ac0      	subs	r0, r0, r3
 8004e0a:	6963      	ldr	r3, [r4, #20]
 8004e0c:	b2f6      	uxtb	r6, r6
 8004e0e:	4283      	cmp	r3, r0
 8004e10:	4637      	mov	r7, r6
 8004e12:	dc04      	bgt.n	8004e1e <__swbuf_r+0x42>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7ff f886 	bl	8003f28 <_fflush_r>
 8004e1c:	bb30      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60a3      	str	r3, [r4, #8]
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	6022      	str	r2, [r4, #0]
 8004e2a:	701e      	strb	r6, [r3, #0]
 8004e2c:	6963      	ldr	r3, [r4, #20]
 8004e2e:	3001      	adds	r0, #1
 8004e30:	4283      	cmp	r3, r0
 8004e32:	d004      	beq.n	8004e3e <__swbuf_r+0x62>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	07db      	lsls	r3, r3, #31
 8004e38:	d506      	bpl.n	8004e48 <__swbuf_r+0x6c>
 8004e3a:	2e0a      	cmp	r6, #10
 8004e3c:	d104      	bne.n	8004e48 <__swbuf_r+0x6c>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff f871 	bl	8003f28 <_fflush_r>
 8004e46:	b988      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e48:	4638      	mov	r0, r7
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <__swbuf_r+0x9c>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <__swbuf_r+0x7a>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7cf      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <__swbuf_r+0xa0>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7ca      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f80c 	bl	8004e80 <__swsetup_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d0cb      	beq.n	8004e04 <__swbuf_r+0x28>
 8004e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e70:	e7ea      	b.n	8004e48 <__swbuf_r+0x6c>
 8004e72:	bf00      	nop
 8004e74:	080053b8 	.word	0x080053b8
 8004e78:	080053d8 	.word	0x080053d8
 8004e7c:	08005398 	.word	0x08005398

08004e80 <__swsetup_r>:
 8004e80:	4b32      	ldr	r3, [pc, #200]	; (8004f4c <__swsetup_r+0xcc>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681d      	ldr	r5, [r3, #0]
 8004e86:	4606      	mov	r6, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b125      	cbz	r5, 8004e96 <__swsetup_r+0x16>
 8004e8c:	69ab      	ldr	r3, [r5, #24]
 8004e8e:	b913      	cbnz	r3, 8004e96 <__swsetup_r+0x16>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f7ff f8ef 	bl	8004074 <__sinit>
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <__swsetup_r+0xd0>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	d10f      	bne.n	8004ebc <__swsetup_r+0x3c>
 8004e9c:	686c      	ldr	r4, [r5, #4]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d42c      	bmi.n	8004f02 <__swsetup_r+0x82>
 8004ea8:	06dd      	lsls	r5, r3, #27
 8004eaa:	d411      	bmi.n	8004ed0 <__swsetup_r+0x50>
 8004eac:	2309      	movs	r3, #9
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eba:	e03e      	b.n	8004f3a <__swsetup_r+0xba>
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <__swsetup_r+0xd4>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <__swsetup_r+0x46>
 8004ec2:	68ac      	ldr	r4, [r5, #8]
 8004ec4:	e7eb      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <__swsetup_r+0xd8>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68ec      	ldreq	r4, [r5, #12]
 8004ece:	e7e6      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ed0:	0758      	lsls	r0, r3, #29
 8004ed2:	d512      	bpl.n	8004efa <__swsetup_r+0x7a>
 8004ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed6:	b141      	cbz	r1, 8004eea <__swsetup_r+0x6a>
 8004ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <__swsetup_r+0x66>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f7ff f995 	bl	8004210 <_free_r>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	b94b      	cbnz	r3, 8004f1a <__swsetup_r+0x9a>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d003      	beq.n	8004f1a <__swsetup_r+0x9a>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f845 	bl	8004fa4 <__smakebuf_r>
 8004f1a:	89a0      	ldrh	r0, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	f010 0301 	ands.w	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <__swsetup_r+0xbc>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	6963      	ldr	r3, [r4, #20]
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	61a3      	str	r3, [r4, #24]
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b943      	cbnz	r3, 8004f46 <__swsetup_r+0xc6>
 8004f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f38:	d1ba      	bne.n	8004eb0 <__swsetup_r+0x30>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	0781      	lsls	r1, r0, #30
 8004f3e:	bf58      	it	pl
 8004f40:	6963      	ldrpl	r3, [r4, #20]
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	e7f4      	b.n	8004f30 <__swsetup_r+0xb0>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e7f7      	b.n	8004f3a <__swsetup_r+0xba>
 8004f4a:	bf00      	nop
 8004f4c:	20000028 	.word	0x20000028
 8004f50:	080053b8 	.word	0x080053b8
 8004f54:	080053d8 	.word	0x080053d8
 8004f58:	08005398 	.word	0x08005398

08004f5c <__swhatbuf_r>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	460e      	mov	r6, r1
 8004f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f64:	2900      	cmp	r1, #0
 8004f66:	b096      	sub	sp, #88	; 0x58
 8004f68:	4614      	mov	r4, r2
 8004f6a:	461d      	mov	r5, r3
 8004f6c:	da07      	bge.n	8004f7e <__swhatbuf_r+0x22>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	89b3      	ldrh	r3, [r6, #12]
 8004f74:	061a      	lsls	r2, r3, #24
 8004f76:	d410      	bmi.n	8004f9a <__swhatbuf_r+0x3e>
 8004f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7c:	e00e      	b.n	8004f9c <__swhatbuf_r+0x40>
 8004f7e:	466a      	mov	r2, sp
 8004f80:	f000 f89e 	bl	80050c0 <_fstat_r>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	dbf2      	blt.n	8004f6e <__swhatbuf_r+0x12>
 8004f88:	9a01      	ldr	r2, [sp, #4]
 8004f8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f92:	425a      	negs	r2, r3
 8004f94:	415a      	adcs	r2, r3
 8004f96:	602a      	str	r2, [r5, #0]
 8004f98:	e7ee      	b.n	8004f78 <__swhatbuf_r+0x1c>
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	b016      	add	sp, #88	; 0x58
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}

08004fa4 <__smakebuf_r>:
 8004fa4:	898b      	ldrh	r3, [r1, #12]
 8004fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fa8:	079d      	lsls	r5, r3, #30
 8004faa:	4606      	mov	r6, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	d507      	bpl.n	8004fc0 <__smakebuf_r+0x1c>
 8004fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	2301      	movs	r3, #1
 8004fba:	6163      	str	r3, [r4, #20]
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	ab01      	add	r3, sp, #4
 8004fc2:	466a      	mov	r2, sp
 8004fc4:	f7ff ffca 	bl	8004f5c <__swhatbuf_r>
 8004fc8:	9900      	ldr	r1, [sp, #0]
 8004fca:	4605      	mov	r5, r0
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f7ff f96f 	bl	80042b0 <_malloc_r>
 8004fd2:	b948      	cbnz	r0, 8004fe8 <__smakebuf_r+0x44>
 8004fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fd8:	059a      	lsls	r2, r3, #22
 8004fda:	d4ef      	bmi.n	8004fbc <__smakebuf_r+0x18>
 8004fdc:	f023 0303 	bic.w	r3, r3, #3
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	e7e3      	b.n	8004fb0 <__smakebuf_r+0xc>
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <__smakebuf_r+0x7c>)
 8004fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	6020      	str	r0, [r4, #0]
 8004ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	9b00      	ldr	r3, [sp, #0]
 8004ff8:	6163      	str	r3, [r4, #20]
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	6120      	str	r0, [r4, #16]
 8004ffe:	b15b      	cbz	r3, 8005018 <__smakebuf_r+0x74>
 8005000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005004:	4630      	mov	r0, r6
 8005006:	f000 f86d 	bl	80050e4 <_isatty_r>
 800500a:	b128      	cbz	r0, 8005018 <__smakebuf_r+0x74>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	89a0      	ldrh	r0, [r4, #12]
 800501a:	4305      	orrs	r5, r0
 800501c:	81a5      	strh	r5, [r4, #12]
 800501e:	e7cd      	b.n	8004fbc <__smakebuf_r+0x18>
 8005020:	0800400d 	.word	0x0800400d

08005024 <memcpy>:
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	f100 33ff 	add.w	r3, r0, #4294967295
 800502c:	d100      	bne.n	8005030 <memcpy+0xc>
 800502e:	4770      	bx	lr
 8005030:	b510      	push	{r4, lr}
 8005032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503a:	4291      	cmp	r1, r2
 800503c:	d1f9      	bne.n	8005032 <memcpy+0xe>
 800503e:	bd10      	pop	{r4, pc}

08005040 <memmove>:
 8005040:	4288      	cmp	r0, r1
 8005042:	b510      	push	{r4, lr}
 8005044:	eb01 0402 	add.w	r4, r1, r2
 8005048:	d902      	bls.n	8005050 <memmove+0x10>
 800504a:	4284      	cmp	r4, r0
 800504c:	4623      	mov	r3, r4
 800504e:	d807      	bhi.n	8005060 <memmove+0x20>
 8005050:	1e43      	subs	r3, r0, #1
 8005052:	42a1      	cmp	r1, r4
 8005054:	d008      	beq.n	8005068 <memmove+0x28>
 8005056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800505a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800505e:	e7f8      	b.n	8005052 <memmove+0x12>
 8005060:	4402      	add	r2, r0
 8005062:	4601      	mov	r1, r0
 8005064:	428a      	cmp	r2, r1
 8005066:	d100      	bne.n	800506a <memmove+0x2a>
 8005068:	bd10      	pop	{r4, pc}
 800506a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800506e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005072:	e7f7      	b.n	8005064 <memmove+0x24>

08005074 <_realloc_r>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	4607      	mov	r7, r0
 8005078:	4614      	mov	r4, r2
 800507a:	460e      	mov	r6, r1
 800507c:	b921      	cbnz	r1, 8005088 <_realloc_r+0x14>
 800507e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005082:	4611      	mov	r1, r2
 8005084:	f7ff b914 	b.w	80042b0 <_malloc_r>
 8005088:	b922      	cbnz	r2, 8005094 <_realloc_r+0x20>
 800508a:	f7ff f8c1 	bl	8004210 <_free_r>
 800508e:	4625      	mov	r5, r4
 8005090:	4628      	mov	r0, r5
 8005092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005094:	f000 f836 	bl	8005104 <_malloc_usable_size_r>
 8005098:	42a0      	cmp	r0, r4
 800509a:	d20f      	bcs.n	80050bc <_realloc_r+0x48>
 800509c:	4621      	mov	r1, r4
 800509e:	4638      	mov	r0, r7
 80050a0:	f7ff f906 	bl	80042b0 <_malloc_r>
 80050a4:	4605      	mov	r5, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d0f2      	beq.n	8005090 <_realloc_r+0x1c>
 80050aa:	4631      	mov	r1, r6
 80050ac:	4622      	mov	r2, r4
 80050ae:	f7ff ffb9 	bl	8005024 <memcpy>
 80050b2:	4631      	mov	r1, r6
 80050b4:	4638      	mov	r0, r7
 80050b6:	f7ff f8ab 	bl	8004210 <_free_r>
 80050ba:	e7e9      	b.n	8005090 <_realloc_r+0x1c>
 80050bc:	4635      	mov	r5, r6
 80050be:	e7e7      	b.n	8005090 <_realloc_r+0x1c>

080050c0 <_fstat_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4d07      	ldr	r5, [pc, #28]	; (80050e0 <_fstat_r+0x20>)
 80050c4:	2300      	movs	r3, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	f7fe fd1e 	bl	8003b0e <_fstat>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d102      	bne.n	80050dc <_fstat_r+0x1c>
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	b103      	cbz	r3, 80050dc <_fstat_r+0x1c>
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
 80050de:	bf00      	nop
 80050e0:	2000067c 	.word	0x2000067c

080050e4 <_isatty_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d06      	ldr	r5, [pc, #24]	; (8005100 <_isatty_r+0x1c>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fe fe72 	bl	8003dd8 <_isatty>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_isatty_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_isatty_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	2000067c 	.word	0x2000067c

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
